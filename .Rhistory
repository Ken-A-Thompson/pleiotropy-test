filter(Species_or_CrossType %in% c("F1", "BC")) %>%
left_join(., nis_traits_different_or_not) %>%
filter(TraitType %in% c("Morphology")) %>% # only include morphological data
filter(parents_different_stats == F) %>%
group_by(StudyID, Cross_ID, Cross_Dir, Sex) %>%
mutate(segregation_variance = 1.33 * SD[match('BC', Species_or_CrossType)]^2 / SD[match('F1', Species_or_CrossType)]^2) %>%
group_by(StudyID, Cross_ID) %>%
summarise(mean_segvar_non_diff = mean(log1p(segregation_variance), na.rm = T)) %>%
left_join(., divergence_and_transgression_df) %>%
select(StudyID, Cross_ID, mean_segvar_non_diff, mean_sds_diff_divergent_traits, mean_sds_diff_non_divergent_traits)  %>%
na.omit() %>%
mutate(crosscat = "BC") %>%
filter(!StudyID %in% divergence_and_transgression_df_segvar$StudyID)
# merge the datasets so there are BCs and F2s.
divergence_and_transgression_df_both <- rbind(divergence_and_transgression_df_segvar, divergence_and_transgression_df_bc)
# vector containing list of studies.
study_list_master <- divergence_and_transgression_df_segvar$StudyID
# add in the genetic distance data
divergence_and_transgression_df_segvar_gendist <- divergence_and_transgression_df_segvar %>%
mutate(studycross = paste(StudyID, Cross_ID, sep = " ")) %>%
left_join(nis_species_intra_inter, by = "studycross")
# create a dataset with each trait treated differently
data_for_dryad <- nis_traits_std %>%
filter(TraitType == "Morphology") %>%
left_join(., nis_traits_different_or_not) %>%
filter(StudyID %in% study_list_master)
# generate a list of traits in the studies
study_traits <- data_for_dryad %>%
filter(TraitType %in% c("Morphology")) %>%
select(StudyID, TraitDesc, TraitType) %>%
unique()
# list of crosses in the main study
crosses_list <- nis_species_intra_inter %>%
filter(studycross %in% divergence_and_transgression_df_segvar$studycross)
# crosses to upload to timetree to get divergence time estimates
crosses_for_timetree <- nis_species_intra_inter %>%
filter(intra_inter == "inter") %>%
gather(`sp 1`:`sp 2`, key = "species", value = "name")
write.table(crosses_for_timetree$name, file = 'data/timetree.txt',
row.names = F,
quote = F,
col.names = F)
crosses_for_timetree_entry <- nis_species_intra_inter %>%
filter(intra_inter == "inter") %>%
select(-intra_inter)
write_csv(crosses_for_timetree_entry, path = 'data/timetree_data_entry_template.csv')
# only retain plant/animal info
PA_data <- GenDist_All %>%
select(PA, StudyID)
GenDist_all_forMerge <- GenDist_All %>%
select(StudyCross, StudyID, GenDist, first, second) %>%
unique() %>%
mutate(unique_sp = paste(first, second, sep = "_"))
# Study_Species DF
Study_Species_DF <- nis_traits_std %>%
ungroup() %>%
filter(Parent_Hybrid == "Parent") %>% # only need to consider parents here
select(StudyID, Cross_ID, ParentID, Species_or_CrossType) %>%
unique() %>%
mutate(Species_or_CrossType.Short = sub("_", " ", Species_or_CrossType)) %>%
separate(Species_or_CrossType.Short, into = c('species', 'col2', 'col3'), sep = "_") %>%
group_by(StudyID, Cross_ID) %>%
select(-c(col2, col3)) %>%
arrange(species) %>%  # alphabetize
mutate(id = 1:n()) %>%
mutate(New_ParentID = ifelse(id == 1, "A", "B")) %>% # recode the numbers to letters for nicer spread
select(StudyID, Cross_ID, species, New_ParentID) %>%
mutate(species = sub(" ", "_", species)) %>% # add underscore
dplyr::filter(New_ParentID == "A") %>%
ungroup() %>%
select(StudyID, species)
# divergence time and phenotypic divergence
divergence_time_trait_DF <- nis_traits_std %>%
dplyr::filter(Species_or_CrossType == "F1") %>% # start by looking only at F1; Parent data are associated
left_join(., nis_traits_different_or_not) %>% # now bring in the dataset asking if traits are different or not
# filter(parents_different_stats == T) %>% filter to restrict dataset to traits that are different at P < 0.05
hablar::rationalize(max_SD_diff) %>%  # convert infinite to NA
group_by(StudyID, Cross_ID) %>% # grouping variables for pipe
summarise(mean_sds_diff_divergent_traits =
mean(max_SD_diff[match('TRUE', parents_different_stats)], na.rm = T), # mean divergence of traits that are / are not different
mean_sds_diff_non_divergent_traits =
mean(max_SD_diff[match('FALSE', parents_different_stats)], na.rm = T)) %>%
# na.omit() %>%
mutate(studycross = paste(StudyID, Cross_ID, sep = " ")) %>% # gendist df has underscore
left_join(timetree_dt_data)
# all crosses
All_Crosses_GROUPS <- nis_traits_std %>%
ungroup() %>%
filter(Parent_Hybrid == "Parent") %>% # only need to consider parents here
select(StudyID, Cross_ID, ParentID, Species_or_CrossType) %>%
unique() %>%
mutate(Species_or_CrossType.Short = sub("_", " ", Species_or_CrossType)) %>%
separate(Species_or_CrossType.Short, into = c('species', 'col2', 'col3'), sep = "_") %>%
group_by(StudyID, Cross_ID) %>%
select(-c(col2, col3)) %>%
arrange(species) %>%  # alphabetize
mutate(id = 1:n()) %>%
mutate(New_ParentID = ifelse(id == 1, "A", "B")) %>% # recode the numbers to letters for nicer spread
select(StudyID, Cross_ID, species, New_ParentID) %>%
spread(value = species, key = New_ParentID) %>%
mutate(StudyCross = paste(StudyID, Cross_ID, sep = "_")) %>% # gendist df has underscore
mutate(Both_parents_alpha = paste(A, B, sep = " & ")) %>% # join the parents for grouping factor
group_by(Both_parents_alpha) %>%
mutate(group_index = group_indices()) %>% # group indices
ungroup() %>%
select(StudyCross, group_index)
# create the same version of the data for all studies
nis_traits_diff_int_allstudies <- nis_traits_std %>%
mutate(studycross = paste(StudyID, Cross_ID, sep = " ")) %>%
filter(Species_or_CrossType == "F1") %>% # start by looking only at F1; Parent data are associated
left_join(., nis_traits_different_or_not) %>% # now bring in the dataset asking if traits are different or not
# filter(parents_different_stats == T) %>% filter to restrict dataset to traits that are different at P < 0.05
filter(TraitType %in% c("Morphology")) %>% # only include morphological data & life history
hablar::rationalize(max_SD_diff) %>%  # convert infinite to NA
group_by(studycross, StudyID, Cross_ID) %>% # grouping variables for pipe
summarise(mean_sds_diff_divergent_traits =
mean(max_SD_diff[match('TRUE', parents_different_stats)], na.rm = T)) %>%
left_join(nis_species_intra_inter)  %>%
group_by(StudyID, Cross_ID, intra_inter) %>%
mutate(StudyCross = paste(StudyID, Cross_ID, sep = "_")) %>% # gendist df has underscore
left_join(., GenDist_All, by = "StudyCross") %>%
group_by(StudyCross, StudyID.x, intra_inter) %>%
summarise(mean_sds_diff_divergent_traits = mean(mean_sds_diff_divergent_traits, na.rm=T),
mean_GenDist = mean(GenDist)) %>%
rename(StudyID = "StudyID.x") %>%
left_join(PA_data) %>% # add in plant animal
mutate(PA = as.character(PA)) %>%
mutate(PA = ifelse(StudyID == "Kohn_2001", "Animal", PA)) %>%
left_join(., All_Crosses_GROUPS) %>%
group_by(group_index, intra_inter, PA) %>%
summarise(mean_sds_diff_divergent_traits = mean(mean_sds_diff_divergent_traits, na.rm=T),
mean_GenDist = mean(mean_GenDist))
#%%%%%%%%%%%%%#
#%%%%%%%%%%%%%#
#### stats ####
#%%%%%%%%%%%%%#
#%%%%%%%%%%%%%#
# # Spearman's rank-order correlation
spearman.test(divergence_and_transgression_df_segvar$mean_sds_diff_divergent_traits, divergence_and_transgression_df_segvar$mean_segvar_non_diff)
spearman.test(divergence_and_transgression_df_segvar$mean_sds_diff_non_divergent_traits, divergence_and_transgression_df_segvar$mean_segvar_non_diff)
# main linear models; univariate
# running with and without transformation so I can show diagnostics
hypothesis_lm_log <- lm((mean_segvar_non_diff) ~ (mean_sds_diff_divergent_traits), data = divergence_and_transgression_df_segvar)
## summarize the main model
summary(hypothesis_lm_log)
# run a model with non-divergent traits as predictor
alternative_lm <- lm(mean_segvar_non_diff ~ (mean_sds_diff_non_divergent_traits), data = divergence_and_transgression_df_segvar)
summary(alternative_lm) # analysis
# multiple regression
multiple_lm <-  lm((mean_segvar_non_diff) ~ (mean_sds_diff_non_divergent_traits) + (mean_sds_diff_divergent_traits), data = divergence_and_transgression_df_segvar)
summary(multiple_lm)
multiple_lm <-  lm(mean_sds_diff_divergent_traits ~  mean_sds_diff_non_divergent_traits, data = divergence_and_transgression_df_segvar)
summary(multiple_lm)
# install.packages('rsq')
# library(rsq)
# rsq.partial(alternative_lm, multiple_lm)
summary(lm((mean_sds_diff_divergent_traits) ~ (mean_sds_diff_non_divergent_traits), data = divergence_and_transgression_df_segvar))
divergence_and_transgression_df_segvar
divergence_and_transgression_df_segvar
divergence_and_transgression_df
View(divergence_and_transgression_df)
divergence_and_transgression_df <- nis_traits_std %>%
dplyr::filter(Species_or_CrossType == "F2") %>% # start by looking only at F1; Parent data are associated
left_join(., nis_traits_different_or_not) %>% # now bring in the dataset asking if traits are different or not
# filter(parents_different_stats == T) %>% filter to restrict dataset to traits that are different at P < 0.05
# filter(TraitType %in% c("Morphology", "Pigment")) %>% # only include morphological & pigment traits
filter(TraitType %in% c("Morphology")) %>% # only include morphological & pigment traits
# filter(TraitType != "Physiology") %>%
hablar::rationalize(max_SD_diff) %>%  # convert infinite to NA
group_by(StudyID, Cross_ID) %>% # grouping variables for pipe
select(max_SD_diff, parents_different_stats) %>%
group_by(StudyID, Cross_ID, parents_different_stats) %>%
summarise(mean_SD_diff = mean(log1p(max_SD_diff), na.rm = T)) %>%
spread(key = parents_different_stats, value = mean_SD_diff) %>%
select(-`<NA>`) %>%
rename(mean_sds_diff_non_divergent_traits = `FALSE`,
mean_sds_diff_divergent_traits = `TRUE`) %>%
na.omit()
divergence_and_transgression_df
divergence_and_transgression_df <- nis_traits_std %>%
dplyr::filter(Species_or_CrossType == "F2") %>% # start by looking only at F1; Parent data are associated
left_join(., nis_traits_different_or_not) %>% # now bring in the dataset asking if traits are different or not
# filter(parents_different_stats == T) %>% filter to restrict dataset to traits that are different at P < 0.05
# filter(TraitType %in% c("Morphology", "Pigment")) %>% # only include morphological & pigment traits
filter(TraitType %in% c("Morphology")) %>% # only include morphological & pigment traits
# filter(TraitType != "Physiology") %>%
hablar::rationalize(max_SD_diff) %>%  # convert infinite to NA
group_by(StudyID, Cross_ID) %>% # grouping variables for pipe
select(max_SD_diff, parents_different_stats) %>%
group_by(StudyID, Cross_ID, parents_different_stats) %>%
summarise(mean_SD_diff = mean(log1p(max_SD_diff), na.rm = T)) %>%
spread(key = parents_different_stats, value = mean_SD_diff) %>%
select(-`<NA>`) %>%
rename(mean_sds_diff_non_divergent_traits = `FALSE`,
mean_sds_diff_divergent_traits = `TRUE`) %>%
na.omit()
divergence_and_transgression_df <- nis_traits_std %>%
dplyr::filter(Species_or_CrossType == "F2") %>% # start by looking only at F1; Parent data are associated
left_join(., nis_traits_different_or_not) %>% # now bring in the dataset asking if traits are different or not
# filter(parents_different_stats == T) %>% filter to restrict dataset to traits that are different at P < 0.05
# filter(TraitType %in% c("Morphology", "Pigment")) %>% # only include morphological & pigment traits
filter(TraitType %in% c("Morphology")) %>% # only include morphological & pigment traits
# filter(TraitType != "Physiology") %>%
hablar::rationalize(max_SD_diff) %>%  # convert infinite to NA
group_by(StudyID, Cross_ID) %>% # grouping variables for pipe
select(max_SD_diff, parents_different_stats) %>%
group_by(StudyID, Cross_ID, parents_different_stats) %>%
summarise(mean_SD_diff = mean(log1p(max_SD_diff), na.rm = T)) %>%
spread(key = parents_different_stats, value = mean_SD_diff) %>%
# select(-`<NA>`) %>%
rename(mean_sds_diff_non_divergent_traits = `FALSE`,
mean_sds_diff_divergent_traits = `TRUE`) %>%
na.omit()
divergence_and_transgression_df
divergence_and_transgression_df_segvar
divergence_and_transgression_df <- nis_traits_std %>%
dplyr::filter(Species_or_CrossType == "F2") %>% # start by looking only at F1; Parent data are associated
left_join(., nis_traits_different_or_not)
View(divergence_and_transgression_df)
View(nis_traits_std)
divergence_and_transgression_df <- nis_traits_std %>%
dplyr::filter(Species_or_CrossType == "F1") %>% # start by looking only at F1; Parent data are associated
left_join(., nis_traits_different_or_not) %>% # now bring in the dataset asking if traits are different or not
# filter(parents_different_stats == T) %>% filter to restrict dataset to traits that are different at P < 0.05
# filter(TraitType %in% c("Morphology", "Pigment")) %>% # only include morphological & pigment traits
filter(TraitType %in% c("Morphology")) %>% # only include morphological & pigment traits
# filter(TraitType != "Physiology") %>%
hablar::rationalize(max_SD_diff) %>%  # convert infinite to NA
group_by(StudyID, Cross_ID) %>% # grouping variables for pipe
select(max_SD_diff, parents_different_stats) %>%
group_by(StudyID, Cross_ID, parents_different_stats) %>%
summarise(mean_SD_diff = mean(log1p(max_SD_diff), na.rm = T)) %>%
spread(key = parents_different_stats, value = mean_SD_diff) %>%
# select(-`<NA>`) %>%
rename(mean_sds_diff_non_divergent_traits = `FALSE`,
mean_sds_diff_divergent_traits = `TRUE`) %>%
na.omit()
divergence_and_transgression_df
divergence_and_transgression_df <- nis_traits_std %>%
dplyr::filter(Species_or_CrossType == "F1") %>% # start by looking only at F1; Parent data are associated
left_join(., nis_traits_different_or_not) %>% # now bring in the dataset asking if traits are different or not
# filter(parents_different_stats == T) %>% filter to restrict dataset to traits that are different at P < 0.05
# filter(TraitType %in% c("Morphology", "Pigment")) %>% # only include morphological & pigment traits
filter(TraitType %in% c("Morphology")) %>% # only include morphological & pigment traits
# filter(TraitType != "Physiology") %>%
hablar::rationalize(max_SD_diff) %>%  # convert infinite to NA
group_by(StudyID, Cross_ID) %>% # grouping variables for pipe
select(max_SD_diff, parents_different_stats) %>%
group_by(StudyID, Cross_ID, parents_different_stats) %>%
summarise(mean_SD_diff = mean(log1p(max_SD_diff), na.rm = T)) %>%
spread(key = parents_different_stats, value = mean_SD_diff) %>%
select(-`<NA>`) %>%
rename(mean_sds_diff_non_divergent_traits = `FALSE`,
mean_sds_diff_divergent_traits = `TRUE`) %>%
na.omit()
divergence_and_transgression_df
divergence_and_transgression_df_segvar <- nis_traits_SD %>%
# filter(Species_or_CrossType %in% c("F1", "F2")) %>%
left_join(., nis_traits_different_or_not) %>%
filter(StudyID %in% divergence_and_transgression_df$StudyID) %>%
# filter(TraitType %in% c("Morphology", "Pigment")) %>% # only include morphological & pigment traits
filter(TraitType %in% c("Morphology")) %>% # only include morphological & pigment traits
# filter(TraitType != "Physiology") %>%
# filter(TraitType != "Behaviour") %>%
mutate(Species_or_CrossType = ifelse(!Species_or_CrossType %in% c("F1", "F2", "BC"), NA, Species_or_CrossType)) %>%
mutate(Species_or_CrossType = coalesce(Species_or_CrossType, ParentID)) %>%
filter(parents_different_stats == F) %>%
group_by(StudyID, Cross_ID, Cross_Dir, Sex, TraitNo) %>%
select(Species_or_CrossType, TraitNo, SD) %>%
# filter(Species_or_CrossType %in% c("F1", "F2")) %>%
group_by(StudyID, Cross_ID, Sex, Species_or_CrossType, TraitNo) %>%
summarise(SD = mean(SD, na.rm = T)) %>%
group_by(StudyID, Cross_ID, Species_or_CrossType, TraitNo) %>%
summarise(SD = mean(SD, na.rm = T)) %>% # average across sexes
select(Species_or_CrossType, SD, TraitNo) %>%
spread(key = Species_or_CrossType, value = SD) %>%
# mutate(segregation_variance = F2^2 / F1^2) %>%
mutate(segregation_variance = F2^2 / ((2 * (F1^2) + A^2 + B^2 )/ 4)) %>% # I want to try this other metric
group_by(StudyID, Cross_ID) %>%
summarise(mean_segvar_non_diff = mean(log1p(segregation_variance), na.rm = T)) %>%
left_join(., divergence_and_transgression_df) %>%
select(StudyID, Cross_ID, mean_segvar_non_diff, mean_sds_diff_divergent_traits, mean_sds_diff_non_divergent_traits)  %>%
na.omit() %>%
mutate(crosscat = "F2") %>% # add a label because these are all data from F2s
mutate(studycross = paste(StudyID, Cross_ID, sep = " "))
divergence_and_transgression_df_bc <- nis_traits_SD %>%
filter(Species_or_CrossType %in% c("F1", "BC")) %>%
left_join(., nis_traits_different_or_not) %>%
filter(TraitType %in% c("Morphology")) %>% # only include morphological data
filter(parents_different_stats == F) %>%
group_by(StudyID, Cross_ID, Cross_Dir, Sex) %>%
mutate(segregation_variance = 1.33 * SD[match('BC', Species_or_CrossType)]^2 / SD[match('F1', Species_or_CrossType)]^2) %>%
group_by(StudyID, Cross_ID) %>%
summarise(mean_segvar_non_diff = mean(log1p(segregation_variance), na.rm = T)) %>%
left_join(., divergence_and_transgression_df) %>%
select(StudyID, Cross_ID, mean_segvar_non_diff, mean_sds_diff_divergent_traits, mean_sds_diff_non_divergent_traits)  %>%
na.omit() %>%
mutate(crosscat = "BC") %>%
filter(!StudyID %in% divergence_and_transgression_df_segvar$StudyID)
divergence_and_transgression_df_both <- rbind(divergence_and_transgression_df_segvar, divergence_and_transgression_df_bc)
study_list_master <- divergence_and_transgression_df_segvar$StudyID
divergence_and_transgression_df_segvar_gendist <- divergence_and_transgression_df_segvar %>%
mutate(studycross = paste(StudyID, Cross_ID, sep = " ")) %>%
left_join(nis_species_intra_inter, by = "studycross")
data_for_dryad <- nis_traits_std %>%
filter(TraitType == "Morphology") %>%
left_join(., nis_traits_different_or_not) %>%
filter(StudyID %in% study_list_master)
study_traits <- data_for_dryad %>%
filter(TraitType %in% c("Morphology")) %>%
select(StudyID, TraitDesc, TraitType) %>%
unique()
crosses_list <- nis_species_intra_inter %>%
filter(studycross %in% divergence_and_transgression_df_segvar$studycross)
crosses_for_timetree <- nis_species_intra_inter %>%
filter(intra_inter == "inter") %>%
gather(`sp 1`:`sp 2`, key = "species", value = "name")
write.table(crosses_for_timetree$name, file = 'data/timetree.txt',
row.names = F,
quote = F,
col.names = F)
crosses_for_timetree_entry <- nis_species_intra_inter %>%
filter(intra_inter == "inter") %>%
select(-intra_inter)
write_csv(crosses_for_timetree_entry, path = 'data/timetree_data_entry_template.csv')
PA_data <- GenDist_All %>%
select(PA, StudyID)
GenDist_all_forMerge <- GenDist_All %>%
select(StudyCross, StudyID, GenDist, first, second) %>%
unique() %>%
mutate(unique_sp = paste(first, second, sep = "_"))
Study_Species_DF <- nis_traits_std %>%
ungroup() %>%
filter(Parent_Hybrid == "Parent") %>% # only need to consider parents here
select(StudyID, Cross_ID, ParentID, Species_or_CrossType) %>%
unique() %>%
mutate(Species_or_CrossType.Short = sub("_", " ", Species_or_CrossType)) %>%
separate(Species_or_CrossType.Short, into = c('species', 'col2', 'col3'), sep = "_") %>%
group_by(StudyID, Cross_ID) %>%
select(-c(col2, col3)) %>%
arrange(species) %>%  # alphabetize
mutate(id = 1:n()) %>%
mutate(New_ParentID = ifelse(id == 1, "A", "B")) %>% # recode the numbers to letters for nicer spread
select(StudyID, Cross_ID, species, New_ParentID) %>%
mutate(species = sub(" ", "_", species)) %>% # add underscore
dplyr::filter(New_ParentID == "A") %>%
ungroup() %>%
select(StudyID, species)
divergence_time_trait_DF <- nis_traits_std %>%
dplyr::filter(Species_or_CrossType == "F1") %>% # start by looking only at F1; Parent data are associated
left_join(., nis_traits_different_or_not) %>% # now bring in the dataset asking if traits are different or not
# filter(parents_different_stats == T) %>% filter to restrict dataset to traits that are different at P < 0.05
hablar::rationalize(max_SD_diff) %>%  # convert infinite to NA
group_by(StudyID, Cross_ID) %>% # grouping variables for pipe
summarise(mean_sds_diff_divergent_traits =
mean(max_SD_diff[match('TRUE', parents_different_stats)], na.rm = T), # mean divergence of traits that are / are not different
mean_sds_diff_non_divergent_traits =
mean(max_SD_diff[match('FALSE', parents_different_stats)], na.rm = T)) %>%
# na.omit() %>%
mutate(studycross = paste(StudyID, Cross_ID, sep = " ")) %>% # gendist df has underscore
left_join(timetree_dt_data)
All_Crosses_GROUPS <- nis_traits_std %>%
ungroup() %>%
filter(Parent_Hybrid == "Parent") %>% # only need to consider parents here
select(StudyID, Cross_ID, ParentID, Species_or_CrossType) %>%
unique() %>%
mutate(Species_or_CrossType.Short = sub("_", " ", Species_or_CrossType)) %>%
separate(Species_or_CrossType.Short, into = c('species', 'col2', 'col3'), sep = "_") %>%
group_by(StudyID, Cross_ID) %>%
select(-c(col2, col3)) %>%
arrange(species) %>%  # alphabetize
mutate(id = 1:n()) %>%
mutate(New_ParentID = ifelse(id == 1, "A", "B")) %>% # recode the numbers to letters for nicer spread
select(StudyID, Cross_ID, species, New_ParentID) %>%
spread(value = species, key = New_ParentID) %>%
mutate(StudyCross = paste(StudyID, Cross_ID, sep = "_")) %>% # gendist df has underscore
mutate(Both_parents_alpha = paste(A, B, sep = " & ")) %>% # join the parents for grouping factor
group_by(Both_parents_alpha) %>%
mutate(group_index = group_indices()) %>% # group indices
ungroup() %>%
select(StudyCross, group_index)
nis_traits_diff_int_allstudies <- nis_traits_std %>%
mutate(studycross = paste(StudyID, Cross_ID, sep = " ")) %>%
filter(Species_or_CrossType == "F1") %>% # start by looking only at F1; Parent data are associated
left_join(., nis_traits_different_or_not) %>% # now bring in the dataset asking if traits are different or not
# filter(parents_different_stats == T) %>% filter to restrict dataset to traits that are different at P < 0.05
filter(TraitType %in% c("Morphology")) %>% # only include morphological data & life history
hablar::rationalize(max_SD_diff) %>%  # convert infinite to NA
group_by(studycross, StudyID, Cross_ID) %>% # grouping variables for pipe
summarise(mean_sds_diff_divergent_traits =
mean(max_SD_diff[match('TRUE', parents_different_stats)], na.rm = T)) %>%
left_join(nis_species_intra_inter)  %>%
group_by(StudyID, Cross_ID, intra_inter) %>%
mutate(StudyCross = paste(StudyID, Cross_ID, sep = "_")) %>% # gendist df has underscore
left_join(., GenDist_All, by = "StudyCross") %>%
group_by(StudyCross, StudyID.x, intra_inter) %>%
summarise(mean_sds_diff_divergent_traits = mean(mean_sds_diff_divergent_traits, na.rm=T),
mean_GenDist = mean(GenDist)) %>%
rename(StudyID = "StudyID.x") %>%
left_join(PA_data) %>% # add in plant animal
mutate(PA = as.character(PA)) %>%
mutate(PA = ifelse(StudyID == "Kohn_2001", "Animal", PA)) %>%
left_join(., All_Crosses_GROUPS) %>%
group_by(group_index, intra_inter, PA) %>%
summarise(mean_sds_diff_divergent_traits = mean(mean_sds_diff_divergent_traits, na.rm=T),
mean_GenDist = mean(mean_GenDist))
spearman.test(divergence_and_transgression_df_segvar$mean_sds_diff_divergent_traits, divergence_and_transgression_df_segvar$mean_segvar_non_diff)
spearman.test(divergence_and_transgression_df_segvar$mean_sds_diff_non_divergent_traits, divergence_and_transgression_df_segvar$mean_segvar_non_diff)
divergence_and_transgression_df_segvar
spearman.test(divergence_and_transgression_df_segvar$mean_sds_diff_divergent_traits, divergence_and_transgression_df_segvar$mean_segvar_non_diff)
spearman.test(divergence_and_transgression_df_segvar$mean_sds_diff_non_divergent_traits, divergence_and_transgression_df_segvar$mean_segvar_non_diff)
hypothesis_lm_log <- lm((mean_segvar_non_diff) ~ (mean_sds_diff_divergent_traits), data = divergence_and_transgression_df_segvar)
summary(hypothesis_lm_log)
alternative_lm <- lm(mean_segvar_non_diff ~ (mean_sds_diff_non_divergent_traits), data = divergence_and_transgression_df_segvar)
summary(alternative_lm) # analysis
multiple_lm <-  lm((mean_segvar_non_diff) ~ (mean_sds_diff_non_divergent_traits) + (mean_sds_diff_divergent_traits), data = divergence_and_transgression_df_segvar)
summary(multiple_lm)
multiple_lm <-  lm(mean_sds_diff_divergent_traits ~  mean_sds_diff_non_divergent_traits, data = divergence_and_transgression_df_segvar)
summary(multiple_lm)
divergence_and_transgression_df_segvar <- nis_traits_SD %>%
# filter(Species_or_CrossType %in% c("F1", "F2")) %>%
left_join(., nis_traits_different_or_not) %>%
filter(StudyID %in% divergence_and_transgression_df$StudyID) %>%
# filter(TraitType %in% c("Morphology", "Pigment")) %>% # only include morphological & pigment traits
filter(TraitType %in% c("Morphology")) %>% # only include morphological & pigment traits
# filter(TraitType != "Physiology") %>%
# filter(TraitType != "Behaviour") %>%
mutate(Species_or_CrossType = ifelse(!Species_or_CrossType %in% c("F1", "F2", "BC"), NA, Species_or_CrossType)) %>%
mutate(Species_or_CrossType = coalesce(Species_or_CrossType, ParentID)) %>%
filter(parents_different_stats == F) %>%
group_by(StudyID, Cross_ID, Cross_Dir, Sex, TraitNo) %>%
select(Species_or_CrossType, TraitNo, SD) %>%
# filter(Species_or_CrossType %in% c("F1", "F2")) %>%
group_by(StudyID, Cross_ID, Sex, Species_or_CrossType, TraitNo) %>%
summarise(SD = mean(SD, na.rm = T)) %>%
group_by(StudyID, Cross_ID, Species_or_CrossType, TraitNo) %>%
summarise(SD = mean(SD, na.rm = T)) %>% # average across sexes
select(Species_or_CrossType, SD, TraitNo) %>%
spread(key = Species_or_CrossType, value = SD) %>%
mutate(segregation_variance_alternative = F2^2 / F1^2) %>%
mutate(segregation_variance = F2^2 / ((2 * (F1^2) + A^2 + B^2 )/ 4)) %>% # I want to try this other metric
group_by(StudyID, Cross_ID) %>%
summarise(mean_segvar_non_diff = mean(log1p(segregation_variance), na.rm = T),
mean_segvar_non_diff_alt = mean(log1p(segregation_variance_alternative), na.rm = T)) %>%
left_join(., divergence_and_transgression_df) %>%
select(StudyID, Cross_ID, mean_segvar_non_diff, mean_sds_diff_divergent_traits, mean_sds_diff_non_divergent_traits)  %>%
na.omit() %>%
mutate(crosscat = "F2") %>% # add a label because these are all data from F2s
mutate(studycross = paste(StudyID, Cross_ID, sep = " "))
divergence_and_transgression_df_segvar
divergence_and_transgression_df_segvar <- nis_traits_SD %>%
# filter(Species_or_CrossType %in% c("F1", "F2")) %>%
left_join(., nis_traits_different_or_not) %>%
filter(StudyID %in% divergence_and_transgression_df$StudyID) %>%
# filter(TraitType %in% c("Morphology", "Pigment")) %>% # only include morphological & pigment traits
filter(TraitType %in% c("Morphology")) %>% # only include morphological & pigment traits
# filter(TraitType != "Physiology") %>%
# filter(TraitType != "Behaviour") %>%
mutate(Species_or_CrossType = ifelse(!Species_or_CrossType %in% c("F1", "F2", "BC"), NA, Species_or_CrossType)) %>%
mutate(Species_or_CrossType = coalesce(Species_or_CrossType, ParentID)) %>%
filter(parents_different_stats == F) %>%
group_by(StudyID, Cross_ID, Cross_Dir, Sex, TraitNo) %>%
select(Species_or_CrossType, TraitNo, SD) %>%
# filter(Species_or_CrossType %in% c("F1", "F2")) %>%
group_by(StudyID, Cross_ID, Sex, Species_or_CrossType, TraitNo) %>%
summarise(SD = mean(SD, na.rm = T)) %>%
group_by(StudyID, Cross_ID, Species_or_CrossType, TraitNo) %>%
summarise(SD = mean(SD, na.rm = T)) %>% # average across sexes
select(Species_or_CrossType, SD, TraitNo) %>%
spread(key = Species_or_CrossType, value = SD) %>%
mutate(segregation_variance_alternative = F2^2 / F1^2) %>%
mutate(segregation_variance = F2^2 / ((2 * (F1^2) + A^2 + B^2 )/ 4)) %>% # I want to try this other metric
group_by(StudyID, Cross_ID) %>%
summarise(mean_segvar_non_diff = mean(log1p(segregation_variance), na.rm = T),
mean_segvar_non_diff_alt = mean(log1p(segregation_variance_alternative), na.rm = T)) %>%
left_join(., divergence_and_transgression_df) %>%
select(StudyID, Cross_ID, mean_segvar_non_diff, mean_segvar_non_diff_alt, mean_sds_diff_divergent_traits, mean_sds_diff_non_divergent_traits)
divergence_and_transgression_df_segvar
View(mean_segvar_non_diff_alt)
View(divergence_and_transgression_df_segvar)
divergence_and_transgression_df_segvar <- nis_traits_SD %>%
# filter(Species_or_CrossType %in% c("F1", "F2")) %>%
left_join(., nis_traits_different_or_not) %>%
filter(StudyID %in% divergence_and_transgression_df$StudyID) %>%
# filter(TraitType %in% c("Morphology", "Pigment")) %>% # only include morphological & pigment traits
filter(TraitType %in% c("Morphology")) %>% # only include morphological & pigment traits
# filter(TraitType != "Physiology") %>%
# filter(TraitType != "Behaviour") %>%
mutate(Species_or_CrossType = ifelse(!Species_or_CrossType %in% c("F1", "F2", "BC"), NA, Species_or_CrossType)) %>%
mutate(Species_or_CrossType = coalesce(Species_or_CrossType, ParentID)) %>%
filter(parents_different_stats == F) %>%
group_by(StudyID, Cross_ID, Cross_Dir, Sex, TraitNo) %>%
select(Species_or_CrossType, TraitNo, SD) %>%
# filter(Species_or_CrossType %in% c("F1", "F2")) %>%
group_by(StudyID, Cross_ID, Sex, Species_or_CrossType, TraitNo) %>%
summarise(SD = mean(SD, na.rm = T)) %>%
group_by(StudyID, Cross_ID, Species_or_CrossType, TraitNo) %>%
summarise(SD = mean(SD, na.rm = T)) %>% # average across sexes
select(Species_or_CrossType, SD, TraitNo) %>%
spread(key = Species_or_CrossType, value = SD) %>%
mutate(segregation_variance_alternative = F2^2 / F1^2) %>%
mutate(segregation_variance = F2^2 / ((2 * (F1^2) + A^2 + B^2 )/ 4)) %>% # I want to try this other metric
group_by(StudyID, Cross_ID) %>%
summarise(mean_segvar_non_diff = mean(log1p(segregation_variance), na.rm = T),
mean_segvar_non_diff_alt = mean(log1p(segregation_variance_alternative), na.rm = T)) %>%
left_join(., divergence_and_transgression_df) %>%
select(StudyID, Cross_ID, mean_segvar_non_diff, mean_segvar_non_diff_alt, mean_sds_diff_divergent_traits, mean_sds_diff_non_divergent_traits)  %>%
na.omit() %>%
mutate(crosscat = "F2") %>% # add a label because these are all data from F2s
mutate(studycross = paste(StudyID, Cross_ID, sep = " "))
divergence_and_transgression_df_segvar
plot(divergence_and_transgression_df_segvar$mean_segvar_non_diff, divergence_and_transgression_df_segvar$mean_segvar_non_diff_alt)
