na.omit() %>%
mutate(crosscat = "F2") %>% # add a label because these are all data from F2s
mutate(studycross = paste(StudyID, Cross_ID, sep = " "))
# add BACKCROSS DATA (e.g., from Nakazato et al.); this is not for the main analysis but used in supp
divergence_and_transgression_df_bc <- nis_traits_SD %>%
filter(Species_or_CrossType %in% c("F1", "BC")) %>%
left_join(., nis_traits_different_or_not) %>%
filter(TraitType %in% c("Morphology", "Pigment")) %>% # only include morphological data
filter(parents_different_stats == F) %>%
group_by(StudyID, Cross_ID, Cross_Dir, Sex) %>%
mutate(segregation_variance = 1.33 * SD[match('BC', Species_or_CrossType)]^2 / SD[match('F1', Species_or_CrossType)]^2) %>%
group_by(StudyID, Cross_ID) %>%
summarise(mean_segvar_non_diff = mean(segregation_variance, na.rm = T)) %>%
left_join(., divergence_and_transgression_df) %>%
select(StudyID, Cross_ID, mean_segvar_non_diff, mean_sds_diff_divergent_traits, mean_sds_diff_non_divergent_traits)  %>%
na.omit() %>%
mutate(crosscat = "BC") %>%
filter(!StudyID %in% divergence_and_transgression_df_segvar$StudyID)
# merge the datasets so there are BCs and F2s.
divergence_and_transgression_df_both <- rbind(divergence_and_transgression_df_segvar, divergence_and_transgression_df_bc)
# vector containing list of studies.
study_list_master <- divergence_and_transgression_df_segvar$StudyID
# add in the genetic distance data
divergence_and_transgression_df_segvar_gendist <- divergence_and_transgression_df_segvar %>%
mutate(studycross = paste(StudyID, Cross_ID, sep = " ")) %>%
left_join(nis_species_intra_inter, by = "studycross")
# create a dataset with each trait treated differently
data_for_dryad <- nis_traits_std %>%
# filter(Species_or_CrossType == "F1") %>%
left_join(., nis_traits_different_or_not) %>%
filter(StudyID %in% study_list_master)
# generate a list of traits in the studies
study_traits <- data_for_dryad %>%
filter(TraitType %in% c("Morphology", "Pigment")) %>%
select(StudyID, TraitDesc, TraitType) %>%
unique()
spearman.test(divergence_and_transgression_df_segvar$mean_sds_diff_divergent_traits, divergence_and_transgression_df_segvar$mean_segvar_non_diff)
spearman.test(divergence_and_transgression_df_segvar$mean_sds_diff_non_divergent_traits, divergence_and_transgression_df_segvar$mean_segvar_non_diff)
hypothesis_lm_log <- lm(log(mean_segvar_non_diff) ~ log(mean_sds_diff_divergent_traits), data = divergence_and_transgression_df_segvar)
hypothesis_lm_not <- lm(mean_segvar_non_diff ~ I(mean_sds_diff_divergent_traits^2), data = divergence_and_transgression_df_segvar)
summary(hypothesis_lm_log)
summary(hypothesis_lm_not)
divergence_and_transgression_df_segvar <- nis_traits_SD %>%
filter(Species_or_CrossType %in% c("F1", "F2")) %>%
left_join(., nis_traits_different_or_not) %>%
filter(TraitType %in% c("Morphology", "Pigment")) %>% # only include morphological traits
# filter(TraitType != "Physiology") %>%
# filter(TraitType != "Behaviour") %>%
filter(parents_different_stats == F) %>%
group_by(StudyID, Cross_ID, Cross_Dir, Sex, TraitNo) %>%
select(Species_or_CrossType, TraitNo, SD) %>%
filter(Species_or_CrossType %in% c("F1", "F2")) %>%
group_by(StudyID, Cross_ID, Cross_Dir, Sex) %>%
select(Species_or_CrossType, SD, TraitNo) %>%
spread(key = Species_or_CrossType, value = SD) %>%
mutate(segregation_variance = F2^2 / F1^2) %>%
# mutate(segregation_variance = F2 / F1) %>%
group_by(StudyID, Cross_ID) %>%
summarise(mean_segvar_non_diff = mean(segregation_variance, na.rm = T)) %>%
left_join(., divergence_and_transgression_df) %>%
select(StudyID, Cross_ID, mean_segvar_non_diff, mean_sds_diff_divergent_traits, mean_sds_diff_non_divergent_traits)  %>%
na.omit() %>%
mutate(crosscat = "F2") %>% # add a label because these are all data from F2s
mutate(studycross = paste(StudyID, Cross_ID, sep = " "))
divergence_and_transgression_df_bc <- nis_traits_SD %>%
filter(Species_or_CrossType %in% c("F1", "BC")) %>%
left_join(., nis_traits_different_or_not) %>%
filter(TraitType %in% c("Morphology", "Pigment")) %>% # only include morphological data
filter(parents_different_stats == F) %>%
group_by(StudyID, Cross_ID, Cross_Dir, Sex) %>%
mutate(segregation_variance = 1.33 * SD[match('BC', Species_or_CrossType)]^2 / SD[match('F1', Species_or_CrossType)]^2) %>%
group_by(StudyID, Cross_ID) %>%
summarise(mean_segvar_non_diff = mean(segregation_variance, na.rm = T)) %>%
left_join(., divergence_and_transgression_df) %>%
select(StudyID, Cross_ID, mean_segvar_non_diff, mean_sds_diff_divergent_traits, mean_sds_diff_non_divergent_traits)  %>%
na.omit() %>%
mutate(crosscat = "BC") %>%
filter(!StudyID %in% divergence_and_transgression_df_segvar$StudyID)
divergence_and_transgression_df_segvar
divergence_and_transgression_df_segvar <- nis_traits_SD %>%
filter(Species_or_CrossType %in% c("F1", "F2")) %>%
left_join(., nis_traits_different_or_not) %>%
filter(TraitType %in% c("Morphology", "Pigment")) %>% # only include morphological traits
# filter(TraitType != "Physiology") %>%
# filter(TraitType != "Behaviour") %>%
filter(parents_different_stats == F) %>%
group_by(StudyID, Cross_ID, Cross_Dir, Sex, TraitNo) %>%
select(Species_or_CrossType, TraitNo, SD) %>%
filter(Species_or_CrossType %in% c("F1", "F2")) %>%
group_by(StudyID, Cross_ID, Cross_Dir, Sex) %>%
select(Species_or_CrossType, SD, TraitNo) %>%
spread(key = Species_or_CrossType, value = SD) %>%
mutate(segregation_variance = F2^2 / F1^2) %>%
# mutate(segregation_variance = F2 / F1) %>%
group_by(StudyID, Cross_ID) %>%
summarise(mean_segvar_non_diff = mean(segregation_variance, na.rm = T)) %>%
left_join(., divergence_and_transgression_df) %>%
select(StudyID, Cross_ID, mean_segvar_non_diff, mean_sds_diff_divergent_traits, mean_sds_diff_non_divergent_traits)  %>%
na.omit() %>%
mutate(crosscat = "F2") %>% # add a label because these are all data from F2s
mutate(studycross = paste(StudyID, Cross_ID, sep = " "))
divergence_and_transgression_df_bc <- nis_traits_SD %>%
filter(Species_or_CrossType %in% c("F1", "BC")) %>%
left_join(., nis_traits_different_or_not) %>%
filter(TraitType %in% c("Morphology", "Pigment")) %>% # only include morphological data
filter(parents_different_stats == F) %>%
group_by(StudyID, Cross_ID, Cross_Dir, Sex) %>%
mutate(segregation_variance = 1.33 * SD[match('BC', Species_or_CrossType)]^2 / SD[match('F1', Species_or_CrossType)]^2) %>%
group_by(StudyID, Cross_ID) %>%
summarise(mean_segvar_non_diff = mean(segregation_variance, na.rm = T)) %>%
left_join(., divergence_and_transgression_df) %>%
select(StudyID, Cross_ID, mean_segvar_non_diff, mean_sds_diff_divergent_traits, mean_sds_diff_non_divergent_traits)  %>%
na.omit() %>%
mutate(crosscat = "BC") %>%
filter(!StudyID %in% divergence_and_transgression_df_segvar$StudyID)
divergence_and_transgression_df_both <- rbind(divergence_and_transgression_df_segvar, divergence_and_transgression_df_bc)
study_list_master <- divergence_and_transgression_df_segvar$StudyID
divergence_and_transgression_df_segvar_gendist <- divergence_and_transgression_df_segvar %>%
mutate(studycross = paste(StudyID, Cross_ID, sep = " ")) %>%
left_join(nis_species_intra_inter, by = "studycross")
data_for_dryad <- nis_traits_std %>%
# filter(Species_or_CrossType == "F1") %>%
left_join(., nis_traits_different_or_not) %>%
filter(StudyID %in% study_list_master)
study_traits <- data_for_dryad %>%
filter(TraitType %in% c("Morphology", "Pigment")) %>%
select(StudyID, TraitDesc, TraitType) %>%
unique()
crosses_list <- nis_species_intra_inter %>%
filter(studycross %in% divergence_and_transgression_df_segvar$studycross)
crosses_for_timetree <- nis_species_intra_inter %>%
filter(intra_inter == "inter") %>%
gather(`sp 1`:`sp 2`, key = "species", value = "name")
write.table(crosses_for_timetree$name, file = 'data/timetree.txt',
row.names = F,
quote = F,
col.names = F)
crosses_for_timetree_entry <- nis_species_intra_inter %>%
filter(intra_inter == "inter") %>%
select(-intra_inter)
write_csv(crosses_for_timetree_entry, path = 'data/timetree_data_entry_template.csv')
PA_data <- GenDist_All %>%
select(PA, StudyID)
GenDist_all_forMerge <- GenDist_All %>%
select(StudyCross, StudyID, GenDist, first, second) %>%
unique() %>%
mutate(unique_sp = paste(first, second, sep = "_"))
Study_Species_DF <- nis_traits_std %>%
ungroup() %>%
filter(Parent_Hybrid == "Parent") %>% # only need to consider parents here
select(StudyID, Cross_ID, ParentID, Species_or_CrossType) %>%
unique() %>%
mutate(Species_or_CrossType.Short = sub("_", " ", Species_or_CrossType)) %>%
separate(Species_or_CrossType.Short, into = c('species', 'col2', 'col3'), sep = "_") %>%
group_by(StudyID, Cross_ID) %>%
select(-c(col2, col3)) %>%
arrange(species) %>%  # alphabetize
mutate(id = 1:n()) %>%
mutate(New_ParentID = ifelse(id == 1, "A", "B")) %>% # recode the numbers to letters for nicer spread
select(StudyID, Cross_ID, species, New_ParentID) %>%
mutate(species = sub(" ", "_", species)) %>% # add underscore
dplyr::filter(New_ParentID == "A") %>%
ungroup() %>%
select(StudyID, species)
divergence_time_trait_DF <- nis_traits_std %>%
dplyr::filter(Species_or_CrossType == "F1") %>% # start by looking only at F1; Parent data are associated
left_join(., nis_traits_different_or_not) %>% # now bring in the dataset asking if traits are different or not
# filter(parents_different_stats == T) %>% filter to restrict dataset to traits that are different at P < 0.05
hablar::rationalize(max_SD_diff) %>%  # convert infinite to NA
group_by(StudyID, Cross_ID) %>% # grouping variables for pipe
summarise(mean_sds_diff_divergent_traits =
mean(max_SD_diff[match('TRUE', parents_different_stats)], na.rm = T), # mean divergence of traits that are / are not different
mean_sds_diff_non_divergent_traits =
mean(max_SD_diff[match('FALSE', parents_different_stats)], na.rm = T)) %>%
# na.omit() %>%
mutate(studycross = paste(StudyID, Cross_ID, sep = " ")) %>% # gendist df has underscore
left_join(timetree_dt_data)
All_Crosses_GROUPS <- nis_traits_std %>%
ungroup() %>%
filter(Parent_Hybrid == "Parent") %>% # only need to consider parents here
select(StudyID, Cross_ID, ParentID, Species_or_CrossType) %>%
unique() %>%
mutate(Species_or_CrossType.Short = sub("_", " ", Species_or_CrossType)) %>%
separate(Species_or_CrossType.Short, into = c('species', 'col2', 'col3'), sep = "_") %>%
group_by(StudyID, Cross_ID) %>%
select(-c(col2, col3)) %>%
arrange(species) %>%  # alphabetize
mutate(id = 1:n()) %>%
mutate(New_ParentID = ifelse(id == 1, "A", "B")) %>% # recode the numbers to letters for nicer spread
select(StudyID, Cross_ID, species, New_ParentID) %>%
spread(value = species, key = New_ParentID) %>%
mutate(StudyCross = paste(StudyID, Cross_ID, sep = "_")) %>% # gendist df has underscore
mutate(Both_parents_alpha = paste(A, B, sep = " & ")) %>% # join the parents for grouping factor
group_by(Both_parents_alpha) %>%
mutate(group_index = group_indices()) %>% # group indices
ungroup() %>%
select(StudyCross, group_index)
nis_traits_diff_int_allstudies <- nis_traits_std %>%
mutate(studycross = paste(StudyID, Cross_ID, sep = " ")) %>%
filter(Species_or_CrossType == "F1") %>% # start by looking only at F1; Parent data are associated
left_join(., nis_traits_different_or_not) %>% # now bring in the dataset asking if traits are different or not
# filter(parents_different_stats == T) %>% filter to restrict dataset to traits that are different at P < 0.05
filter(TraitType %in% c("Morphology")) %>% # only include morphological data & life history
hablar::rationalize(max_SD_diff) %>%  # convert infinite to NA
group_by(studycross, StudyID, Cross_ID) %>% # grouping variables for pipe
summarise(mean_sds_diff_divergent_traits =
mean(max_SD_diff[match('TRUE', parents_different_stats)], na.rm = T)) %>%
left_join(nis_species_intra_inter)  %>%
group_by(StudyID, Cross_ID, intra_inter) %>%
mutate(StudyCross = paste(StudyID, Cross_ID, sep = "_")) %>% # gendist df has underscore
left_join(., GenDist_All, by = "StudyCross") %>%
group_by(StudyCross, StudyID.x, intra_inter) %>%
summarise(mean_sds_diff_divergent_traits = mean(mean_sds_diff_divergent_traits, na.rm=T),
mean_GenDist = mean(GenDist)) %>%
rename(StudyID = "StudyID.x") %>%
left_join(PA_data) %>% # add in plant animal
mutate(PA = as.character(PA)) %>%
mutate(PA = ifelse(StudyID == "Kohn_2001", "Animal", PA)) %>%
left_join(., All_Crosses_GROUPS) %>%
group_by(group_index, intra_inter, PA) %>%
summarise(mean_sds_diff_divergent_traits = mean(mean_sds_diff_divergent_traits, na.rm=T),
mean_GenDist = mean(mean_GenDist))
spearman.test(divergence_and_transgression_df_segvar$mean_sds_diff_divergent_traits, divergence_and_transgression_df_segvar$mean_segvar_non_diff)
spearman.test(divergence_and_transgression_df_segvar$mean_sds_diff_non_divergent_traits, divergence_and_transgression_df_segvar$mean_segvar_non_diff)
hypothesis_lm_log <- lm(log(mean_segvar_non_diff) ~ log(mean_sds_diff_divergent_traits), data = divergence_and_transgression_df_segvar)
hypothesis_lm_not <- lm(mean_segvar_non_diff ~ I(mean_sds_diff_divergent_traits^2), data = divergence_and_transgression_df_segvar)
summary(hypothesis_lm_log)
summary(hypothesis_lm_not)
alternative_lm <- lm(log(mean_segvar_non_diff) ~ log1p(mean_sds_diff_non_divergent_traits), data = divergence_and_transgression_df_segvar)
summary(alternative_lm) # analysis
multiple_lm <-  lm(log(mean_segvar_non_diff) ~ log1p(mean_sds_diff_non_divergent_traits) + log(mean_sds_diff_divergent_traits), data = divergence_and_transgression_df_segvar)
summary(multiple_lm)
rsq.partial(alternative_lm, multiple_lm)
summary(lm(log(mean_sds_diff_divergent_traits) ~ log1p(mean_sds_diff_non_divergent_traits), data = divergence_and_transgression_df_segvar))
divergence_and_transgression_df_segvar
summary(aov(mean_sds_diff_divergent_traits ~ intra_inter, data = divergence_and_transgression_df_segvar_gendist))
Study_Species_DF_FULL <- divergence_and_transgression_df_segvar %>%
left_join(., Study_Species_DF) %>%
unique() %>%
ungroup() %>%
mutate(rn = row_number()) %>% # this is not great right now but works; deletes duplicates selz
filter(rn %in% c(1:12, 15:17)) %>%
ungroup()
mean_segvar_non_diff_DF <- Study_Species_DF_FULL %>%
select(mean_segvar_non_diff)
mean_p_div_DF <- Study_Species_DF_FULL %>%
select(mean_sds_diff_divergent_traits)
rownames(mean_segvar_non_diff_DF) <- Study_Species_DF_FULL$species
rownames(mean_p_div_DF) <- Study_Species_DF_FULL$species
species_to_retain <- as.vector(rownames(mean_segvar_non_diff_DF))
trait_segvar <- as.vector(t(log(mean_segvar_non_diff_DF[,1])))
names(trait_segvar) <- rownames(mean_segvar_non_diff_DF)
trait_div <- as.vector(t(log(Study_Species_DF_FULL[,4])))
names(trait_div) <- rownames(mean_p_div_DF)
pruned.tree <- drop.tip(phyloT_tree, setdiff(phyloT_tree$tip.label, species_to_retain));
pruned.tree$edge.length <- rep(0.2, 2 * phyloT_tree$Nnode)
phylosig(pruned.tree, trait_segvar, test = TRUE)
phylosig(pruned.tree, trait_div, test = TRUE)
phylosig(pruned.tree, trait_segvar, method="lambda",test=TRUE)
phylosig(pruned.tree, trait_div, method="lambda",test=TRUE)
theme_KT_FGM <-
theme(
aspect.ratio = 1.0,
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(size = 1),
axis.line.x = element_line(color = "black", size = 1),
axis.line.y = element_line(color = "black", size = 1),
axis.ticks = element_line(color = "black"),
axis.text = element_text(color = "black"),
axis.title = element_text(color = "black"),
axis.title.y = element_text(vjust = 0.2, size = 14),
axis.title.x = element_text(vjust = 0.1, size = 14),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
legend.position = "none")
segregation_variance_phenotype <-
ggplot(divergence_and_transgression_df_segvar,
aes(x = log(mean_sds_diff_divergent_traits), y = log(mean_segvar_non_diff))) +
xlab("ln(mean phenotypic distance [SDs]\nof divergent traits between parents)") +
ylab("ln(segregation variance of\nnon-divergent traits in hybrids)") +
geom_point() +
geom_smooth(method = "lm", se = F, colour = "black") +
theme_KT_FGM +
theme(aspect.ratio = 3/4)
segregation_variance_phenotype_non_divergent_fig <- ggplot(divergence_and_transgression_df_segvar,
aes(x = log(mean_sds_diff_non_divergent_traits), y = log(mean_segvar_non_diff))) +
xlab("ln(phenotypic distance (SDs)\nof non-divergent traits + 1)") +
ylab("ln(segregation variance of\nnon-divergent traits)") +
geom_point() +
geom_smooth(method = "lm", se = F, colour = "black") +
theme_KT_FGM +
theme(aspect.ratio = 3/4)
summary(lm(log(mean_segvar_non_diff) ~ log1p(mean_sds_diff_non_divergent_traits), divergence_and_transgression_df_segvar))
segregation_variance_phenotype
segregation_variance_phenotype_non_divergent_fig
segregation_variance_phenotype
divergence_and_transgression_df <- nis_traits_std %>%
dplyr::filter(Species_or_CrossType == "F1") %>% # start by looking only at F1; Parent data are associated
left_join(., nis_traits_different_or_not) %>% # now bring in the dataset asking if traits are different or not
# filter(parents_different_stats == T) %>% filter to restrict dataset to traits that are different at P < 0.05
filter(TraitType %in% c("Morphology")) %>% # only include morphological traits
# filter(TraitType != "Physiology") %>%
hablar::rationalize(max_SD_diff) %>%  # convert infinite to NA
group_by(StudyID, Cross_ID) %>% # grouping variables for pipe
select(max_SD_diff, parents_different_stats) %>%
group_by(StudyID, Cross_ID, parents_different_stats) %>%
summarise(mean_SD_diff = mean(max_SD_diff, na.rm = T)) %>%
spread(key = parents_different_stats, value = mean_SD_diff) %>%
select(-`<NA>`) %>%
rename(mean_sds_diff_non_divergent_traits = `FALSE`,
mean_sds_diff_divergent_traits = `TRUE`) %>%
na.omit()
divergence_and_transgression_df_segvar <- nis_traits_SD %>%
filter(Species_or_CrossType %in% c("F1", "F2")) %>%
left_join(., nis_traits_different_or_not) %>%
filter(TraitType %in% c("Morphology")) %>% # only include morphological traits
# filter(TraitType != "Physiology") %>%
# filter(TraitType != "Behaviour") %>%
filter(parents_different_stats == F) %>%
group_by(StudyID, Cross_ID, Cross_Dir, Sex, TraitNo) %>%
select(Species_or_CrossType, TraitNo, SD) %>%
filter(Species_or_CrossType %in% c("F1", "F2")) %>%
group_by(StudyID, Cross_ID, Cross_Dir, Sex) %>%
select(Species_or_CrossType, SD, TraitNo) %>%
spread(key = Species_or_CrossType, value = SD) %>%
mutate(segregation_variance = F2^2 / F1^2) %>%
# mutate(segregation_variance = F2 / F1) %>%
group_by(StudyID, Cross_ID) %>%
summarise(mean_segvar_non_diff = mean(segregation_variance, na.rm = T)) %>%
left_join(., divergence_and_transgression_df) %>%
select(StudyID, Cross_ID, mean_segvar_non_diff, mean_sds_diff_divergent_traits, mean_sds_diff_non_divergent_traits)  %>%
na.omit() %>%
mutate(crosscat = "F2") %>% # add a label because these are all data from F2s
mutate(studycross = paste(StudyID, Cross_ID, sep = " "))
divergence_and_transgression_df_bc <- nis_traits_SD %>%
filter(Species_or_CrossType %in% c("F1", "BC")) %>%
left_join(., nis_traits_different_or_not) %>%
filter(TraitType %in% c("Morphology", "Pigment")) %>% # only include morphological data
filter(parents_different_stats == F) %>%
group_by(StudyID, Cross_ID, Cross_Dir, Sex) %>%
mutate(segregation_variance = 1.33 * SD[match('BC', Species_or_CrossType)]^2 / SD[match('F1', Species_or_CrossType)]^2) %>%
group_by(StudyID, Cross_ID) %>%
summarise(mean_segvar_non_diff = mean(segregation_variance, na.rm = T)) %>%
left_join(., divergence_and_transgression_df) %>%
select(StudyID, Cross_ID, mean_segvar_non_diff, mean_sds_diff_divergent_traits, mean_sds_diff_non_divergent_traits)  %>%
na.omit() %>%
mutate(crosscat = "BC") %>%
filter(!StudyID %in% divergence_and_transgression_df_segvar$StudyID)
divergence_and_transgression_df_both <- rbind(divergence_and_transgression_df_segvar, divergence_and_transgression_df_bc)
study_list_master <- divergence_and_transgression_df_segvar$StudyID
divergence_and_transgression_df_segvar_gendist <- divergence_and_transgression_df_segvar %>%
mutate(studycross = paste(StudyID, Cross_ID, sep = " ")) %>%
left_join(nis_species_intra_inter, by = "studycross")
data_for_dryad <- nis_traits_std %>%
# filter(Species_or_CrossType == "F1") %>%
left_join(., nis_traits_different_or_not) %>%
filter(StudyID %in% study_list_master)
study_traits <- data_for_dryad %>%
filter(TraitType %in% c("Morphology", "Pigment")) %>%
select(StudyID, TraitDesc, TraitType) %>%
unique()
crosses_list <- nis_species_intra_inter %>%
filter(studycross %in% divergence_and_transgression_df_segvar$studycross)
crosses_for_timetree <- nis_species_intra_inter %>%
filter(intra_inter == "inter") %>%
gather(`sp 1`:`sp 2`, key = "species", value = "name")
write.table(crosses_for_timetree$name, file = 'data/timetree.txt',
row.names = F,
quote = F,
col.names = F)
crosses_for_timetree_entry <- nis_species_intra_inter %>%
filter(intra_inter == "inter") %>%
select(-intra_inter)
write_csv(crosses_for_timetree_entry, path = 'data/timetree_data_entry_template.csv')
PA_data <- GenDist_All %>%
select(PA, StudyID)
GenDist_all_forMerge <- GenDist_All %>%
select(StudyCross, StudyID, GenDist, first, second) %>%
unique() %>%
mutate(unique_sp = paste(first, second, sep = "_"))
Study_Species_DF <- nis_traits_std %>%
ungroup() %>%
filter(Parent_Hybrid == "Parent") %>% # only need to consider parents here
select(StudyID, Cross_ID, ParentID, Species_or_CrossType) %>%
unique() %>%
mutate(Species_or_CrossType.Short = sub("_", " ", Species_or_CrossType)) %>%
separate(Species_or_CrossType.Short, into = c('species', 'col2', 'col3'), sep = "_") %>%
group_by(StudyID, Cross_ID) %>%
select(-c(col2, col3)) %>%
arrange(species) %>%  # alphabetize
mutate(id = 1:n()) %>%
mutate(New_ParentID = ifelse(id == 1, "A", "B")) %>% # recode the numbers to letters for nicer spread
select(StudyID, Cross_ID, species, New_ParentID) %>%
mutate(species = sub(" ", "_", species)) %>% # add underscore
dplyr::filter(New_ParentID == "A") %>%
ungroup() %>%
select(StudyID, species)
divergence_time_trait_DF <- nis_traits_std %>%
dplyr::filter(Species_or_CrossType == "F1") %>% # start by looking only at F1; Parent data are associated
left_join(., nis_traits_different_or_not) %>% # now bring in the dataset asking if traits are different or not
# filter(parents_different_stats == T) %>% filter to restrict dataset to traits that are different at P < 0.05
hablar::rationalize(max_SD_diff) %>%  # convert infinite to NA
group_by(StudyID, Cross_ID) %>% # grouping variables for pipe
summarise(mean_sds_diff_divergent_traits =
mean(max_SD_diff[match('TRUE', parents_different_stats)], na.rm = T), # mean divergence of traits that are / are not different
mean_sds_diff_non_divergent_traits =
mean(max_SD_diff[match('FALSE', parents_different_stats)], na.rm = T)) %>%
# na.omit() %>%
mutate(studycross = paste(StudyID, Cross_ID, sep = " ")) %>% # gendist df has underscore
left_join(timetree_dt_data)
All_Crosses_GROUPS <- nis_traits_std %>%
ungroup() %>%
filter(Parent_Hybrid == "Parent") %>% # only need to consider parents here
select(StudyID, Cross_ID, ParentID, Species_or_CrossType) %>%
unique() %>%
mutate(Species_or_CrossType.Short = sub("_", " ", Species_or_CrossType)) %>%
separate(Species_or_CrossType.Short, into = c('species', 'col2', 'col3'), sep = "_") %>%
group_by(StudyID, Cross_ID) %>%
select(-c(col2, col3)) %>%
arrange(species) %>%  # alphabetize
mutate(id = 1:n()) %>%
mutate(New_ParentID = ifelse(id == 1, "A", "B")) %>% # recode the numbers to letters for nicer spread
select(StudyID, Cross_ID, species, New_ParentID) %>%
spread(value = species, key = New_ParentID) %>%
mutate(StudyCross = paste(StudyID, Cross_ID, sep = "_")) %>% # gendist df has underscore
mutate(Both_parents_alpha = paste(A, B, sep = " & ")) %>% # join the parents for grouping factor
group_by(Both_parents_alpha) %>%
mutate(group_index = group_indices()) %>% # group indices
ungroup() %>%
select(StudyCross, group_index)
nis_traits_diff_int_allstudies <- nis_traits_std %>%
mutate(studycross = paste(StudyID, Cross_ID, sep = " ")) %>%
filter(Species_or_CrossType == "F1") %>% # start by looking only at F1; Parent data are associated
left_join(., nis_traits_different_or_not) %>% # now bring in the dataset asking if traits are different or not
# filter(parents_different_stats == T) %>% filter to restrict dataset to traits that are different at P < 0.05
filter(TraitType %in% c("Morphology")) %>% # only include morphological data & life history
hablar::rationalize(max_SD_diff) %>%  # convert infinite to NA
group_by(studycross, StudyID, Cross_ID) %>% # grouping variables for pipe
summarise(mean_sds_diff_divergent_traits =
mean(max_SD_diff[match('TRUE', parents_different_stats)], na.rm = T)) %>%
left_join(nis_species_intra_inter)  %>%
group_by(StudyID, Cross_ID, intra_inter) %>%
mutate(StudyCross = paste(StudyID, Cross_ID, sep = "_")) %>% # gendist df has underscore
left_join(., GenDist_All, by = "StudyCross") %>%
group_by(StudyCross, StudyID.x, intra_inter) %>%
summarise(mean_sds_diff_divergent_traits = mean(mean_sds_diff_divergent_traits, na.rm=T),
mean_GenDist = mean(GenDist)) %>%
rename(StudyID = "StudyID.x") %>%
left_join(PA_data) %>% # add in plant animal
mutate(PA = as.character(PA)) %>%
mutate(PA = ifelse(StudyID == "Kohn_2001", "Animal", PA)) %>%
left_join(., All_Crosses_GROUPS) %>%
group_by(group_index, intra_inter, PA) %>%
summarise(mean_sds_diff_divergent_traits = mean(mean_sds_diff_divergent_traits, na.rm=T),
mean_GenDist = mean(mean_GenDist))
spearman.test(divergence_and_transgression_df_segvar$mean_sds_diff_divergent_traits, divergence_and_transgression_df_segvar$mean_segvar_non_diff)
spearman.test(divergence_and_transgression_df_segvar$mean_sds_diff_non_divergent_traits, divergence_and_transgression_df_segvar$mean_segvar_non_diff)
hypothesis_lm_log <- lm(log(mean_segvar_non_diff) ~ log(mean_sds_diff_divergent_traits), data = divergence_and_transgression_df_segvar)
hypothesis_lm_not <- lm(mean_segvar_non_diff ~ I(mean_sds_diff_divergent_traits^2), data = divergence_and_transgression_df_segvar)
summary(hypothesis_lm_log)
summary(hypothesis_lm_not)
alternative_lm <- lm(log(mean_segvar_non_diff) ~ log1p(mean_sds_diff_non_divergent_traits), data = divergence_and_transgression_df_segvar)
summary(alternative_lm) # analysis
multiple_lm <-  lm(log(mean_segvar_non_diff) ~ log1p(mean_sds_diff_non_divergent_traits) + log(mean_sds_diff_divergent_traits), data = divergence_and_transgression_df_segvar)
summary(multiple_lm)
theme_KT_FGM <-
theme(
aspect.ratio = 1.0,
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(size = 1),
axis.line.x = element_line(color = "black", size = 1),
axis.line.y = element_line(color = "black", size = 1),
axis.ticks = element_line(color = "black"),
axis.text = element_text(color = "black"),
axis.title = element_text(color = "black"),
axis.title.y = element_text(vjust = 0.2, size = 14),
axis.title.x = element_text(vjust = 0.1, size = 14),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
legend.position = "none")
segregation_variance_phenotype <-
ggplot(divergence_and_transgression_df_segvar,
aes(x = log(mean_sds_diff_divergent_traits), y = log(mean_segvar_non_diff))) +
xlab("ln(mean phenotypic distance [SDs]\nof divergent traits between parents)") +
ylab("ln(segregation variance of\nnon-divergent traits in hybrids)") +
geom_point() +
geom_smooth(method = "lm", se = F, colour = "black") +
theme_KT_FGM +
theme(aspect.ratio = 3/4)
segregation_variance_phenotype_non_divergent_fig <- ggplot(divergence_and_transgression_df_segvar,
aes(x = log(mean_sds_diff_non_divergent_traits), y = log(mean_segvar_non_diff))) +
xlab("ln(phenotypic distance (SDs)\nof non-divergent traits + 1)") +
ylab("ln(segregation variance of\nnon-divergent traits)") +
geom_point() +
geom_smooth(method = "lm", se = F, colour = "black") +
theme_KT_FGM +
theme(aspect.ratio = 3/4)
segregation_variance_phenotype
hypothesis_lm_log <- lm(log(mean_segvar_non_diff) ~ log(mean_sds_diff_divergent_traits), data = divergence_and_transgression_df_segvar)
hypothesis_lm_not <- lm(mean_segvar_non_diff ~ I(mean_sds_diff_divergent_traits^2), data = divergence_and_transgression_df_segvar)
summary(hypothesis_lm_log)
summary(hypothesis_lm_not)
alternative_lm <- lm(log(mean_segvar_non_diff) ~ log1p(mean_sds_diff_non_divergent_traits), data = divergence_and_transgression_df_segvar)
summary(alternative_lm) # analysis
multiple_lm <-  lm(log(mean_segvar_non_diff) ~ log1p(mean_sds_diff_non_divergent_traits) + log(mean_sds_diff_divergent_traits), data = divergence_and_transgression_df_segvar)
summary(multiple_lm)
