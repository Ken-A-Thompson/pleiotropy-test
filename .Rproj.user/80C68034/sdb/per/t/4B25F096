{
    "collab_server" : "",
    "contents" : "# to do: different parent SD.\n\n# Fisher's model test\n# author: ken a. thompson\n#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#\n#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#\n#### install & load packages ####\n#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#\n#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#\n\n# note for users during review process: I am saving Figures to a local overleaf directory because it's synced to my manuscript preparation system. this won't work on your machine but if you do really want to save rather than view the figures just change to a directory that exists on your machine.\n\n# uncomment to install\n# install.packages('devtools')\n# install.packages('ggfortify')\n# install.packages('tidyverse')\n# install.packages('phytools')\n# install.packages('pspearman')\n\n# load 'em\nlibrary(cowplot)\nlibrary(ggfortify)\nlibrary(pspearman) # for the spearman test of correlation\n# library(hablar) # rationalize function\nlibrary(tidyverse)\n# for phytools\nlibrary(devtools)\n# install_github(\"liamrevell/phytools\")\nlibrary(phytools)\n\n#%%%%%%%%%%%%%%%%%#\n#### load data ####\n#%%%%%%%%%%%%%%%%%#\n\nGenDist_All <- read.csv(file = 'data/GenDist_Data_All.csv')\nnis_traits_std <- read_csv(file = 'data/nis_traits_std.csv')\nnis_traits_SD <- read_csv(file = 'data/nis_traits_SD.csv')\nnis_traits_different_or_not <- read_csv('data/nis_traits_different_or_not.csv')\nnis_species_intra_inter <- read_csv('data/nis_species_intra_inter.csv')\nphyloT_tree <- read.newick('data/2019-03-02_phyloT_generated_tree_1551546803_newick.txt') # tree from PhyloT; more spp no BL\n# timetree_tree\ntimetree_dt_data <- read.csv(file = 'data/FILLED_timetree_data.csv')\n\n\n# simulation data\nno_p_sim_data <- read_csv(file = 'simulations/data/no_p_phenotypes_n2_K1000_pmut0.1_alpha0.1_B2_u0.001.csv', col_names = c('ind_no', 'rep', 'nmuts', 'dist', 't1', 't2'))\np_lg_sim_data <- read_csv(file = 'simulations/data/p_lg_phenotypes_n2_K1000_pmut0.1_alpha0.1_B2_u0.001.csv', col_names = c('ind_no', 'rep', 'nmuts', 'dist', 't1', 't2'))\np_sm_sim_data <- read_csv(file = 'simulations/data/p_sm_phenotypes_n2_K1000_pmut0.1_alpha0.0_B2_u0.100.csv', col_names = c('ind_no', 'rep', 'nmuts', 'dist', 't1', 't2'))\n\n#%%%%%%%%%%%%%%%%%#\n#%%%%%%%%%%%%%%%%%#\n#### functions ####\n#%%%%%%%%%%%%%%%%%#\n#%%%%%%%%%%%%%%%%%#\n\nsimple_lm_fig_function <- function(data){ggplot(data, \n                                                aes(x = log(mean_sds_diff_divergent_traits), y = log(mean_segvar_non_diff))) +\n    xlab(\"ln(phenotypic distance [SDs]\\nof divergent traits)\") +\n    ylab(\"ln(segregation variance of\\nnon-divergent traits)\") +\n    geom_point() +\n    geom_smooth(method = \"lm\", se = F, colour = \"black\") +\n    theme_KT_FGM + \n    theme(aspect.ratio = 3/4)\n  # segregation_variance_phenotype_RAW\n}\n\nfilter_diff_traits <- function(traittypes) {\n  divergence_and_transgression_df <- nis_traits_std %>% \n    filter(Species_or_CrossType == \"F1\") %>% # start by looking only at F1; Parent data are associated\n    left_join(., nis_traits_different_or_not) %>% # now bring in the dataset asking if traits are different or not\n    # filter(parents_different_stats == T) %>% filter to restrict dataset to traits that are different at P < 0.05\n    filter(TraitType %in% traittypes) %>% # only include morphological data & life history\n    hablar::rationalize(max_SD_diff) %>%  # convert infinite to NA\n    group_by(StudyID, Cross_ID) %>% # grouping variables for pipe\n    summarise(mean_sds_diff_divergent_traits = \n                mean(max_SD_diff[match('TRUE', parents_different_stats_and_SD)], na.rm = T),\n              mean_sds_diff_non_divergent_traits = \n                mean(max_SD_diff[match('FALSE', parents_different_stats_and_SD)], na.rm = T)) %>% \n    na.omit()\n  \n  # we need to reduce this dataset to studies that have F1s and F2s.\n  divergence_and_transgression_df_segvar <- nis_traits_SD %>% \n    filter(Species_or_CrossType %in% c(\"F1\", \"F2\")) %>%\n    left_join(., nis_traits_different_or_not) %>%\n    filter(TraitType %in% traittypes) %>% # only include morphological data\n    # filter(TraitType != \"Behaviour\") %>%\n    filter(parents_different_stats_and_SD == F) %>% \n    group_by(StudyID, Cross_ID, Cross_Dir, Sex) %>% \n    mutate(segregation_variance = SD[match('F2', Species_or_CrossType)]^2 / SD[match('F1', Species_or_CrossType)]^2) %>% \n    group_by(StudyID, Cross_ID) %>% \n    summarise(mean_segvar_non_diff = mean(segregation_variance, na.rm = T)) %>% \n    left_join(., divergence_and_transgression_df) %>% \n    select(StudyID, Cross_ID, mean_segvar_non_diff, mean_sds_diff_divergent_traits, mean_sds_diff_non_divergent_traits)  %>% \n    na.omit() %>% \n    mutate(crosscat = \"F2\") # add a label because these are all data from F2s\n}\n\nfilter_stats_and_SD <- function(data) {\n  divergence_and_transgression_df <- data %>% \n    filter(Species_or_CrossType == \"F1\") %>% # start by looking only at F1; Parent data are associated\n    left_join(., nis_traits_different_or_not) %>% # now bring in the dataset asking if traits are different or not\n    # filter(parents_different_stats == T) %>% filter to restrict dataset to traits that are different at P < 0.05\n    filter(TraitType == \"Morphology\") %>% # only include morphological data & life history\n    hablar::rationalize(max_SD_diff) %>%  # convert infinite to NA\n    group_by(StudyID, Cross_ID) %>% # grouping variables for pipe\n    summarise(mean_sds_diff_divergent_traits = \n                mean(max_SD_diff[match('TRUE', parents_different_stats_and_SD)], na.rm = T),\n              mean_sds_diff_non_divergent_traits = \n                mean(max_SD_diff[match('FALSE', parents_different_stats_and_SD)], na.rm = T)) %>% \n    na.omit()\n  \n  # we need to reduce this dataset to studies that have F1s and F2s.\n  divergence_and_transgression_df_segvar <- nis_traits_SD %>% \n    filter(Species_or_CrossType %in% c(\"F1\", \"F2\")) %>%\n    left_join(., nis_traits_different_or_not) %>%\n    filter(TraitType == \"Morphology\") %>% # only include morphological data\n    filter(parents_different_stats_and_SD == F) %>% \n    group_by(StudyID, Cross_ID, Cross_Dir, Sex) %>% \n    mutate(segregation_variance = SD[match('F2', Species_or_CrossType)]^2 / SD[match('F1', Species_or_CrossType)]^2) %>% \n    group_by(StudyID, Cross_ID) %>% \n    summarise(mean_segvar_non_diff = mean(segregation_variance, na.rm = T)) %>% \n    left_join(., divergence_and_transgression_df) %>% \n    select(StudyID, Cross_ID, mean_segvar_non_diff, mean_sds_diff_divergent_traits, mean_sds_diff_non_divergent_traits)  %>% \n    na.omit() %>% \n    mutate(crosscat = \"F2\") # add a label because these are all data from F2s\n}\n\n#%%%%%%%%%%%%%%%%%%%%%%%#\n#%%%%%%%%%%%%%%%%%%%%%%%#\n#### data processing ####\n#%%%%%%%%%%%%%%%%%%%%%%%#\n#%%%%%%%%%%%%%%%%%%%%%%%#\n\n# compare_segvar_df\ncompare_segvar_df <- nis_traits_SD %>% \n  left_join(., nis_traits_different_or_not) %>%\n  filter(parents_different_stats_and_SD == F) %>% \n  filter(Species_or_CrossType %in% c(\"F1\", \"F2\")) %>%\n  group_by(TraitType, StudyID, Cross_ID, Cross_Dir, Sex, TraitDesc) %>% \n  select(Species_or_CrossType, SD) %>% \n  spread(key = Species_or_CrossType, value = SD) %>% \n  mutate(segregation_variance = F2 / F1) %>% \n  group_by(TraitType, StudyID, Cross_ID) %>% \n  summarise(segregation_variance = mean(segregation_variance, na.rm = T)) %>% \n  na.omit()\n  hablar::rationalize(segregation_variance) #%>%  # convert infinite to NA\n  # group_by(TraitType) \n  # summarise(segregation_variance = mean(segregation_variance, na.rm = T)) %>%\n  # select(TraitType, segregation_variance) %>%\n  # na.omit()\n  # \nsegvar_aov <- aov(segregation_variance ~ TraitType, compare_segvar_df)\nTukeyHSD(segvar_aov)\n\n# create a dataset that has studies with divergent and non divergent traits \ndivergence_and_transgression_df <- nis_traits_std %>% \n  dplyr::filter(Species_or_CrossType == \"F1\") %>% # start by looking only at F1; Parent data are associated\n  left_join(., nis_traits_different_or_not) %>% # now bring in the dataset asking if traits are different or not\n  # filter(parents_different_stats == T) %>% filter to restrict dataset to traits that are different at P < 0.05\n  filter(TraitType %in% c(\"Morphology\")) %>% # only include morphological traits\n  # filter(TraitType != \"Physiology\") %>%\n  hablar::rationalize(max_SD_diff) %>%  # convert infinite to NA\n  group_by(StudyID, Cross_ID) %>% # grouping variables for pipe\n  select(max_SD_diff, parents_different_stats) %>% \n  group_by(StudyID, Cross_ID, parents_different_stats) %>% \n  summarise(mean_SD_diff = mean(max_SD_diff, na.rm = T)) %>% \n  spread(key = parents_different_stats, value = mean_SD_diff) %>% \n  select(-`<NA>`) %>% \n  rename(mean_sds_diff_non_divergent_traits = `FALSE`,\n         mean_sds_diff_divergent_traits = `TRUE`) %>% \n  na.omit()\n\n# we need to reduce this dataset to studies that have F1s and F2s.\ndivergence_and_transgression_df_segvar <- nis_traits_SD %>% \n  filter(Species_or_CrossType %in% c(\"F1\", \"F2\")) %>%\n  left_join(., nis_traits_different_or_not) %>%\n  filter(TraitType %in% c(\"Morphology\")) %>% # only include morphological traits\n  # filter(TraitType != \"Physiology\") %>%\n  # filter(TraitType != \"Behaviour\") %>%\n  filter(parents_different_stats == F) %>% \n  group_by(StudyID, Cross_ID, Cross_Dir, Sex, TraitNo) %>% \n  select(Species_or_CrossType, TraitNo, SD) %>% \n  filter(Species_or_CrossType %in% c(\"F1\", \"F2\")) %>%\n  group_by(StudyID, Cross_ID, Cross_Dir, Sex) %>% \n  select(Species_or_CrossType, SD, TraitNo) %>% \n  spread(key = Species_or_CrossType, value = SD) %>% \n  mutate(segregation_variance = F2^2 / F1^2) %>%\n  # mutate(segregation_variance = F2 / F1) %>%\n  group_by(StudyID, Cross_ID) %>% \n  summarise(mean_segvar_non_diff = mean(segregation_variance, na.rm = T)) %>% \n  left_join(., divergence_and_transgression_df) %>% \n  select(StudyID, Cross_ID, mean_segvar_non_diff, mean_sds_diff_divergent_traits, mean_sds_diff_non_divergent_traits)  %>% \n  na.omit() %>% \n  mutate(crosscat = \"F2\") %>% # add a label because these are all data from F2s\n  mutate(studycross = paste(StudyID, Cross_ID, sep = \" \"))\n  \n# add BACKCROSS DATA (e.g., from Nakazato et al.); this is not for the main analysis but used in supp\ndivergence_and_transgression_df_bc <- nis_traits_SD %>% \n  filter(Species_or_CrossType %in% c(\"F1\", \"BC\")) %>%\n  left_join(., nis_traits_different_or_not) %>%\n  filter(TraitType %in% c(\"Morphology\", \"Pigment\")) %>% # only include morphological data\n  filter(parents_different_stats == F) %>% \n  group_by(StudyID, Cross_ID, Cross_Dir, Sex) %>% \n  mutate(segregation_variance = 1.33 * SD[match('BC', Species_or_CrossType)]^2 / SD[match('F1', Species_or_CrossType)]^2) %>% \n  group_by(StudyID, Cross_ID) %>% \n  summarise(mean_segvar_non_diff = mean(segregation_variance, na.rm = T)) %>% \n  left_join(., divergence_and_transgression_df) %>% \n  select(StudyID, Cross_ID, mean_segvar_non_diff, mean_sds_diff_divergent_traits, mean_sds_diff_non_divergent_traits)  %>% \n  na.omit() %>% \n  mutate(crosscat = \"BC\") %>% \n  filter(!StudyID %in% divergence_and_transgression_df_segvar$StudyID)\n\n# merge the datasets so there are BCs and F2s.\ndivergence_and_transgression_df_both <- rbind(divergence_and_transgression_df_segvar, divergence_and_transgression_df_bc)\n\n# vector containing list of studies.\nstudy_list_master <- divergence_and_transgression_df_segvar$StudyID\n\n# add in the genetic distance data \ndivergence_and_transgression_df_segvar_gendist <- divergence_and_transgression_df_segvar %>% \n  mutate(studycross = paste(StudyID, Cross_ID, sep = \" \")) %>% \n  left_join(nis_species_intra_inter, by = \"studycross\")\n  \n# create a dataset with each trait treated differently\ndata_for_dryad <- nis_traits_std %>% \n  # filter(Species_or_CrossType == \"F1\") %>%\n  left_join(., nis_traits_different_or_not) %>% \n  filter(StudyID %in% study_list_master)\n\n# generate a list of traits in the studies\nstudy_traits <- data_for_dryad %>% \n  filter(TraitType %in% c(\"Morphology\", \"Pigment\")) %>%\n  select(StudyID, TraitDesc, TraitType) %>% \n  unique()\n\n# list of crosses in the main study\ncrosses_list <- nis_species_intra_inter %>% \n  filter(studycross %in% divergence_and_transgression_df_segvar$studycross)\n\n# crosses to upload to timetree to get divergence time estimates\ncrosses_for_timetree <- nis_species_intra_inter %>% \n  filter(intra_inter == \"inter\") %>% \n  gather(`sp 1`:`sp 2`, key = \"species\", value = \"name\")\n\nwrite.table(crosses_for_timetree$name, file = 'data/timetree.txt',\n            row.names = F,\n            quote = F,\n            col.names = F)\n\ncrosses_for_timetree_entry <- nis_species_intra_inter %>% \n  filter(intra_inter == \"inter\") %>% \n  select(-intra_inter)\n\nwrite_csv(crosses_for_timetree_entry, path = 'data/timetree_data_entry_template.csv')\n\n# only retain plant/animal info\nPA_data <- GenDist_All %>% \n  select(PA, StudyID)\n\nGenDist_all_forMerge <- GenDist_All %>% \n  select(StudyCross, StudyID, GenDist, first, second) %>% \n  unique() %>% \n  mutate(unique_sp = paste(first, second, sep = \"_\"))\n\n# Study_Species DF\nStudy_Species_DF <- nis_traits_std %>% \n  ungroup() %>% \n  filter(Parent_Hybrid == \"Parent\") %>% # only need to consider parents here\n  select(StudyID, Cross_ID, ParentID, Species_or_CrossType) %>% \n  unique() %>% \n  mutate(Species_or_CrossType.Short = sub(\"_\", \" \", Species_or_CrossType)) %>% \n  separate(Species_or_CrossType.Short, into = c('species', 'col2', 'col3'), sep = \"_\") %>% \n  group_by(StudyID, Cross_ID) %>% \n  select(-c(col2, col3)) %>% \n  arrange(species) %>%  # alphabetize\n  mutate(id = 1:n()) %>% \n  mutate(New_ParentID = ifelse(id == 1, \"A\", \"B\")) %>% # recode the numbers to letters for nicer spread\n  select(StudyID, Cross_ID, species, New_ParentID) %>% \n  mutate(species = sub(\" \", \"_\", species)) %>% # add underscore\n  dplyr::filter(New_ParentID == \"A\") %>% \n  ungroup() %>% \n  select(StudyID, species)\n\n# divergence time and phenotypic divergence\ndivergence_time_trait_DF <- nis_traits_std %>% \n  dplyr::filter(Species_or_CrossType == \"F1\") %>% # start by looking only at F1; Parent data are associated\n  left_join(., nis_traits_different_or_not) %>% # now bring in the dataset asking if traits are different or not\n  # filter(parents_different_stats == T) %>% filter to restrict dataset to traits that are different at P < 0.05\n  hablar::rationalize(max_SD_diff) %>%  # convert infinite to NA\n  group_by(StudyID, Cross_ID) %>% # grouping variables for pipe\n  summarise(mean_sds_diff_divergent_traits = \n              mean(max_SD_diff[match('TRUE', parents_different_stats)], na.rm = T), # mean divergence of traits that are / are not different\n            mean_sds_diff_non_divergent_traits = \n              mean(max_SD_diff[match('FALSE', parents_different_stats)], na.rm = T)) %>% \n  # na.omit() %>% \n  mutate(studycross = paste(StudyID, Cross_ID, sep = \" \")) %>% # gendist df has underscore \n  left_join(timetree_dt_data)\n  \n# all crosses\nAll_Crosses_GROUPS <- nis_traits_std %>% \n  ungroup() %>% \n  filter(Parent_Hybrid == \"Parent\") %>% # only need to consider parents here\n  select(StudyID, Cross_ID, ParentID, Species_or_CrossType) %>% \n  unique() %>% \n  mutate(Species_or_CrossType.Short = sub(\"_\", \" \", Species_or_CrossType)) %>% \n  separate(Species_or_CrossType.Short, into = c('species', 'col2', 'col3'), sep = \"_\") %>% \n  group_by(StudyID, Cross_ID) %>% \n  select(-c(col2, col3)) %>% \n  arrange(species) %>%  # alphabetize\n  mutate(id = 1:n()) %>% \n  mutate(New_ParentID = ifelse(id == 1, \"A\", \"B\")) %>% # recode the numbers to letters for nicer spread\n  select(StudyID, Cross_ID, species, New_ParentID) %>% \n  spread(value = species, key = New_ParentID) %>% \n  mutate(StudyCross = paste(StudyID, Cross_ID, sep = \"_\")) %>% # gendist df has underscore \n  mutate(Both_parents_alpha = paste(A, B, sep = \" & \")) %>% # join the parents for grouping factor\n  group_by(Both_parents_alpha) %>% \n  mutate(group_index = group_indices()) %>% # group indices\n  ungroup() %>% \n  select(StudyCross, group_index)\n\n# create the same version of the data for all studies\nnis_traits_diff_int_allstudies <- nis_traits_std %>% \n  mutate(studycross = paste(StudyID, Cross_ID, sep = \" \")) %>% \n  filter(Species_or_CrossType == \"F1\") %>% # start by looking only at F1; Parent data are associated\n  left_join(., nis_traits_different_or_not) %>% # now bring in the dataset asking if traits are different or not\n  # filter(parents_different_stats == T) %>% filter to restrict dataset to traits that are different at P < 0.05\n  filter(TraitType %in% c(\"Morphology\")) %>% # only include morphological data & life history\n  hablar::rationalize(max_SD_diff) %>%  # convert infinite to NA\n  group_by(studycross, StudyID, Cross_ID) %>% # grouping variables for pipe\n  summarise(mean_sds_diff_divergent_traits = \n              mean(max_SD_diff[match('TRUE', parents_different_stats)], na.rm = T)) %>% \n  left_join(nis_species_intra_inter)  %>% \n  group_by(StudyID, Cross_ID, intra_inter) %>% \n  mutate(StudyCross = paste(StudyID, Cross_ID, sep = \"_\")) %>% # gendist df has underscore \n  left_join(., GenDist_All, by = \"StudyCross\") %>% \n  group_by(StudyCross, StudyID.x, intra_inter) %>% \n  summarise(mean_sds_diff_divergent_traits = mean(mean_sds_diff_divergent_traits, na.rm=T),\n            mean_GenDist = mean(GenDist)) %>%\n  rename(StudyID = \"StudyID.x\") %>% \n  left_join(PA_data) %>% # add in plant animal\n  mutate(PA = as.character(PA)) %>% \n  mutate(PA = ifelse(StudyID == \"Kohn_2001\", \"Animal\", PA)) %>% \n  left_join(., All_Crosses_GROUPS) %>% \n  group_by(group_index, intra_inter, PA) %>% \n  summarise(mean_sds_diff_divergent_traits = mean(mean_sds_diff_divergent_traits, na.rm=T),\n            mean_GenDist = mean(mean_GenDist))\n\n#%%%%%%%%%%%%%#\n#%%%%%%%%%%%%%#\n#### stats ####\n#%%%%%%%%%%%%%#\n#%%%%%%%%%%%%%#\n\n# # Spearman's rank-order correlation\nspearman.test(divergence_and_transgression_df_segvar$mean_sds_diff_divergent_traits, divergence_and_transgression_df_segvar$mean_segvar_non_diff)\nspearman.test(divergence_and_transgression_df_segvar$mean_sds_diff_non_divergent_traits, divergence_and_transgression_df_segvar$mean_segvar_non_diff)\n\n# main linear models; univariate\n# running with and without transformation so I can show diagnostics\nhypothesis_lm_log <- lm(log(mean_segvar_non_diff) ~ log(mean_sds_diff_divergent_traits), data = divergence_and_transgression_df_segvar)\nhypothesis_lm_not <- lm(mean_segvar_non_diff ~ I(mean_sds_diff_divergent_traits^2), data = divergence_and_transgression_df_segvar)\n\n## summarize the main model\nsummary(hypothesis_lm_log)\nsummary(hypothesis_lm_not)\n\n\n# run a model with non-divergent traits as predictor\nalternative_lm <- lm(log(mean_segvar_non_diff) ~ log1p(mean_sds_diff_non_divergent_traits), data = divergence_and_transgression_df_segvar)\nsummary(alternative_lm) # analysis\n\n# multiple regression\nmultiple_lm <-  lm(log(mean_segvar_non_diff) ~ log1p(mean_sds_diff_non_divergent_traits) + log(mean_sds_diff_divergent_traits), data = divergence_and_transgression_df_segvar)\n\nsummary(multiple_lm)\n\n# install.packages('rsq')\n# library(rsq)\nrsq.partial(alternative_lm, multiple_lm)\n\nsummary(lm(log(mean_sds_diff_divergent_traits) ~ log1p(mean_sds_diff_non_divergent_traits), data = divergence_and_transgression_df_segvar))\n\ndivergence_and_transgression_df_segvar\n\n#%%%%%%%%%%%%%%%%%%%%%%%%#\n# genetic distance tests # \n#%%%%%%%%%%%%%%%%%%%%%%%%#\n\n# in the dataset currently being considered, is there a difference between inter and intra-specific crosses in phenotypic divergence?\nsummary(aov(mean_sds_diff_divergent_traits ~ intra_inter, data = divergence_and_transgression_df_segvar_gendist))\n\n#%%%%%%%%%%%%%%%%%%%%%%%%#\n# pylogenetic signal # \n#%%%%%%%%%%%%%%%%%%%%%%%%#\n\n# # phytools uses SPECIES as rownames (ick)\n#\nStudy_Species_DF_FULL <- divergence_and_transgression_df_segvar %>%\n  left_join(., Study_Species_DF) %>%\n  unique() %>%\n  ungroup() %>%\n  mutate(rn = row_number()) %>% # this is not great right now but works; deletes duplicates selz\n  filter(rn %in% c(1:12, 15:17)) %>%\n  ungroup()\n\n# trying treeplyr; will move up if I like it\n# install.packages('treeplyr')\n# library(treeplyr)\n\n# load TIMETREE\n# timetree_tree <- read.tree('!FGM_Test_Offshoot/data/timetree.nwk')\n# try make.treedata from treeplyr\n# td <- make.treedata(tree = timetree_tree, data = )\n\nmean_segvar_non_diff_DF <- Study_Species_DF_FULL %>%\n  select(mean_segvar_non_diff)\n\nmean_p_div_DF <- Study_Species_DF_FULL %>%\n  select(mean_sds_diff_divergent_traits)\n\n# stupid but have to change rownames\nrownames(mean_segvar_non_diff_DF) <- Study_Species_DF_FULL$species\nrownames(mean_p_div_DF) <- Study_Species_DF_FULL$species\n\nspecies_to_retain <- as.vector(rownames(mean_segvar_non_diff_DF))\n\n# THIS SEEMS TO WORK!\n# create data input for phytools::phloysig\ntrait_segvar <- as.vector(t(log(mean_segvar_non_diff_DF[,1])))\nnames(trait_segvar) <- rownames(mean_segvar_non_diff_DF)\n\n# divergence\n# mean_p_div_DF2 <-F\n# clean this up; I get sloppy in base!\ntrait_div <- as.vector(t(log(Study_Species_DF_FULL[,4])))\nnames(trait_div) <- rownames(mean_p_div_DF)\n\n\npruned.tree <- drop.tip(phyloT_tree, setdiff(phyloT_tree$tip.label, species_to_retain));\n# # set branch lengths to random\npruned.tree$edge.length <- rep(0.2, 2 * phyloT_tree$Nnode)\n\nphylosig(pruned.tree, trait_segvar, test = TRUE)\nphylosig(pruned.tree, trait_div, test = TRUE)\n\n# also can do lambda\n# phylogenetic signal for trait segregation variance (log)\nphylosig(pruned.tree, trait_segvar, method=\"lambda\",test=TRUE)\n\n# phylogenetic signal for parental divergence\nphylosig(pruned.tree, trait_div, method=\"lambda\",test=TRUE)\n\n#%%%%%%%%%%%%%%%#\n#%%%%%%%%%%%%%%%#\n#### figures ####\n#%%%%%%%%%%%%%%%#\n#%%%%%%%%%%%%%%%#\n\n# load the ggplot figure theme\ntheme_KT_FGM <-\n  theme(\n    aspect.ratio = 1.0,\n    panel.background = element_blank(),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n    panel.border = element_blank(),\n    axis.line = element_line(size = 1),\n    axis.line.x = element_line(color = \"black\", size = 1),\n    axis.line.y = element_line(color = \"black\", size = 1),\n    axis.ticks = element_line(color = \"black\"),\n    axis.text = element_text(color = \"black\"),\n    axis.title = element_text(color = \"black\"),\n    axis.title.y = element_text(vjust = 0.2, size = 14),\n    axis.title.x = element_text(vjust = 0.1, size = 14),\n    axis.text.x = element_text(size = 12),\n    axis.text.y = element_text(size = 12),\n    legend.position = \"none\")\n\n#%%%%%%%%%%%%%%%#\n# MAIN ANALYSIS #\n#%%%%%%%%%%%%%%%#\n\n# here's the plot; appears it doesn't predict F1 mean phenotype... what about segregation variance?\nsegregation_variance_phenotype <- \n  ggplot(divergence_and_transgression_df_segvar, \n         aes(x = log(mean_sds_diff_divergent_traits), y = log(mean_segvar_non_diff))) +\n  xlab(\"ln(mean phenotypic distance [SDs]\\nof divergent traits between parents)\") +\n  ylab(\"ln(segregation variance of\\nnon-divergent traits in hybrids)\") +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = F, colour = \"black\") +\n  theme_KT_FGM + \n  theme(aspect.ratio = 3/4)\n# segregation_variance_phenotype\n\nsegregation_variance_phenotype_non_divergent_fig <- ggplot(divergence_and_transgression_df_segvar, \n         aes(x = log(mean_sds_diff_non_divergent_traits), y = log(mean_segvar_non_diff))) +\n  xlab(\"ln(phenotypic distance (SDs)\\nof non-divergent traits + 1)\") +\n  ylab(\"ln(segregation variance of\\nnon-divergent traits)\") +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = F, colour = \"black\") +\n  theme_KT_FGM + \n  theme(aspect.ratio = 3/4) \n  # annotate(\"text\", label = expression(paste(italic(\"P\"), \" = 0.0265; \",\n  #                                           italic(\"r\")^2, \" = 0.374\")), x = 0.2, y = 1.5, size = 6)\n# segregation_variance_phenotype_non_divergent_fig\n\nsummary(lm(log(mean_segvar_non_diff) ~ log1p(mean_sds_diff_non_divergent_traits), divergence_and_transgression_df_segvar))\n\nggsave(segregation_variance_phenotype, filename = '../../../../Apps/Overleaf/pleiotropy_ms/Figures/pleiotropy_Figure_2.pdf', height = 4, width = 5)\nggsave(segregation_variance_phenotype_non_divergent_fig, filename = '../../../../Apps/Overleaf/pleiotropy_ms/Figures/non_divergent_traits.pdf', height = 4, width = 5)\n\n#%%%%%%%%%%%%%#\n# SIMULATIONS #\n#%%%%%%%%%%%%%#\n\nno_p_sim_data_summary <- no_p_sim_data %>% \n  group_by(rep, dist) %>% \n  summarise(var_t1 = var(t1),\n            var_t2 = var(t2))\n\np_lg_sim_data_summary <- p_lg_sim_data %>% \n  group_by(rep, dist) %>% \n  summarise(var_t1 = var(t1),\n            var_t2 = var(t2))\n\np_sm_sim_data_summary <- p_sm_sim_data %>% \n  group_by(rep, dist) %>% \n  summarise(var_t1 = var(t1),\n            var_t2 = var(t2))\n\ndivergent_p_lg <- \n  ggplot(p_lg_sim_data_summary, \n         aes(x = dist, y = var_t1)) +\n  xlab(\"distance to optimum\") +\n  ylab(\"segregation variance\\n(divergent trait)\") +\n  geom_point() +\n  geom_smooth(method = \"loess\", se = T, colour = \"black\") +\n  ggtitle('pleiotropy; finite') +\n  theme_KT_FGM\n\nNONdivergent_p_lg <- \n  ggplot(p_lg_sim_data_summary, \n         aes(x = dist, y = var_t2)) +\n  xlab(\"distance to optimum\") +\n  ylab(\"segregation variance\\n(non-divergent trait)\") +\n  geom_point() +\n  geom_smooth(method = \"loess\", se = T, colour = \"black\") +\n  ggtitle('pleiotropy; finite') +\n  theme_KT_FGM\n\n\ndivergent_p_sm <- \n  ggplot(p_sm_sim_data_summary, \n         aes(x = dist, y = var_t1)) +\n  xlab(\"distance to optimum\") +\n  ylab(\"segregation variance\\n(divergent trait)\") +\n  geom_point() +\n  # ylim(c(-0.001, 0.001)) +\n  # geom_smooth(method = \"loess\", se = T, colour = \"black\") +\n  ggtitle('pleiotropy; \"infinitesimal\"') +\n  theme_KT_FGM\n\n\nNONdivergent_p_sm <- \n  ggplot(p_sm_sim_data_summary, \n         aes(x = dist, y = var_t2)) +\n  xlab(\"distance to optimum\") +\n  ylab(\"segregation variance\\n(non-divergent trait)\") +\n  geom_point() +\n  # geom_smooth(method = \"loess\", se = T, colour = \"black\") +\n  ggtitle('pleiotropy; \"infinitesimal\"') +\n  theme_KT_FGM\n\ndivergent_no_p <- \n  ggplot(no_p_sim_data_summary, \n         aes(x = dist, y = var_t1)) +\n  xlab(\"distance to optimum\") +\n  ylab(\"segregation variance\\n(divergent trait)\") +\n  geom_point() +\n  geom_smooth(method = \"loess\", se = T, colour = \"black\") +\n  ggtitle('no pleiotropy; finite') +\n  theme_KT_FGM\n\nNONdivergent_no_p <- \n  ggplot(no_p_sim_data_summary, \n         aes(x = dist, y = var_t2)) +\n  xlab(\"distance to optimum\") +\n  ylab(\"segregation variance\\n(non-divergent trait)\") +\n  geom_point() +\n  # geom_smooth(method = \"loess\", se = T, colour = \"black\") +\n  ggtitle('no pleiotropy; finite') +\n  theme_KT_FGM\n\n# plot it\nsims_fig <- plot_grid(NONdivergent_p_sm, NONdivergent_no_p, NONdivergent_p_lg, \n                      divergent_p_sm, divergent_no_p, divergent_p_lg, labels = \"AUTO\")\n# save it\nggsave(sims_fig, filename = '../../../../Apps/Overleaf/pleiotropy_ms/Figures/sims_fig.pdf', height = 7, width = 10)\n\n#%%%%%%%%%%%%%#\n# DIAGNOSTICS #\n#%%%%%%%%%%%%%#\n\n# diagnostic plots\nlog_diagnostics_fig <- autoplot(hypothesis_lm_log)\nraw_diagnostics_fig <- autoplot(hypothesis_lm_not)\n\n# save em\nggsave(log_diagnostics_fig, filename = '../../../../Apps/Overleaf/pleiotropy_ms/Figures/log_diagnostics_fig.pdf', height = 5, width = 5)\nggsave(raw_diagnostics_fig, filename = '../../../../Apps/Overleaf/pleiotropy_ms/Figures/raw_diagnostics_fig.pdf', height = 5, width = 5)\n\n#%%%%%%%%%%#\n# RAW DATA #\n#%%%%%%%%%%#\n\nsegregation_variance_phenotype_RAW <- \n  ggplot(divergence_and_transgression_df_segvar, aes(x = mean_sds_diff_divergent_traits, y = mean_segvar_non_diff)) +\n  xlab(\"phenotypic distance [SDs]\\nof divergent traits\") +\n  ylab(\"segregation variance of\\nnon-divergent traits\") +\n  geom_point() +\n  # geom_smooth(method = \"lm\", se = F, colour = \"black\") +\n  theme_KT_FGM + \n  theme(aspect.ratio = 3/4)\n# segregation_variance_phenotype_RAW\n\nsegregation_variance_phenotype_non_divergent_fig_RAW <- \n  ggplot(divergence_and_transgression_df_segvar, \n         aes(x = (mean_sds_diff_non_divergent_traits), y = (mean_segvar_non_diff))) +\n  xlab(\"phenotypic distance (SDs)\\nof non-divergent traits\") +\n  ylab(\"segregation variance of\\nnon-divergent traits\") +\n  geom_point() +\n  # geom_smooth(method = \"lm\", se = F, colour = \"black\") +\n  theme_KT_FGM + \n  theme(aspect.ratio = 3/4)\n# segregation_variance_phenotype_non_divergent_fig_RAW\n\nsummary(lm(mean_segvar_non_diff ~ mean_sds_diff_divergent_traits, divergence_and_transgression_df_segvar))\n\nraw_data_fig <- plot_grid(segregation_variance_phenotype_RAW, segregation_variance_phenotype_non_divergent_fig_RAW, labels = \"AUTO\")\nggsave(raw_data_fig, filename = '../../../../Apps/Overleaf/pleiotropy_ms/Figures/raw_data_fig.pdf', height = 4, width = 7)\n\n#%%%%%%%%%%#\n# WITH BCS #\n#%%%%%%%%%%#\n\n# here's the plot; appears it doesn't predict F1 mean phenotype... what about segregation variance?\nsegregation_variance_phenotype_BC <- \n  ggplot(divergence_and_transgression_df_both, \n         aes(x = log(mean_sds_diff_divergent_traits), y = log(mean_segvar_non_diff))) +\n  xlab(\"ln(phenotypic distance [SDs]\\nof divergent traits)\") +\n  ylab(\"ln(segregation variance of\\nnon-divergent traits)\") +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = F, colour = \"black\") +\n  theme_KT_FGM + \n  theme(aspect.ratio = 3/4) + \n  annotate(\"text\", label = expression(paste(italic(\"P\"), \" = 0.00676; \",\n                                            italic(\"r\")^2, \" = 0.423\")), x = 0.6, y = 1.2, size = 6)\n\nsummary(lm(log(mean_segvar_non_diff) ~ log(mean_sds_diff_divergent_traits), divergence_and_transgression_df_both))\n\nsegregation_variance_phenotype_non_divergent_fig_BC <- \n  ggplot(divergence_and_transgression_df_both, \n         aes(x = log1p(mean_sds_diff_non_divergent_traits), y = log(mean_segvar_non_diff))) +\n  xlab(\"ln(phenotypic distance (SDs)\\nof non-divergent traits + 1)\") +\n  ylab(\"ln(segregation variance of\\nnon-divergent traits)\") +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = F, colour = \"black\") +\n  theme_KT_FGM + \n  theme(aspect.ratio = 3/4) + \n  annotate(\"text\", label = expression(paste(italic(\"P\"), \" = 0.3712; \",\n                                            italic(\"r\")^2, \" = 0.256\")), x = 0.2, y = 1.5, size = 6)\n\nsummary(lm(log(mean_segvar_non_diff) ~ log1p(mean_sds_diff_non_divergent_traits), divergence_and_transgression_df_both))\n\n\nwithBCs_fig <- plot_grid(segregation_variance_phenotype_BC, segregation_variance_phenotype_non_divergent_fig_BC, labels = \"AUTO\")\n\nggsave(withBCs_fig, filename = '../../../../Apps/Overleaf/pleiotropy_ms/Figures/withBCs_fig.pdf', height = 5, width = 9)\n\n#%%%%%%%%%%#\n# GEN DIST #\n#%%%%%%%%%%#\n\n# violin plot reduced dataset\nIntra_Inter_Reduced_Fig <- ggplot(divergence_and_transgression_df_segvar_gendist, aes(x = intra_inter, y = log(mean_sds_diff_divergent_traits), fill = intra_inter)) +\n  geom_violin() +\n  geom_jitter(width = 0.05, alpha = 0.3) +\n  stat_summary(fun.y=mean, geom=\"point\", shape=19, size=3) +\n  stat_summary(fun.data = mean_cl_normal, geom = \"errorbar\", size = 1, aes(width = 0.5)) +\n  scale_fill_manual(values=c(\"tomato\", \"lightseagreen\")) +\n  ylab(\"ln(phenotypic distance [SDs]\\nof divergent traits)\") + \n  xlab(\"cross type\") +\n  theme_KT_FGM\n\n# \nsummary(aov(log(mean_sds_diff_divergent_traits) ~ intra_inter, data = unique(nis_traits_diff_int_allstudies)))\n\n# some studies (e.g., David_2002) use the same species for all crosses and \n# plot the thing for all studies\nIntra_Inter_All_Fig <- ggplot(unique(nis_traits_diff_int_allstudies), aes(x = intra_inter, y = log(mean_sds_diff_divergent_traits), fill = intra_inter)) +\n  geom_violin() +\n  geom_jitter(width = 0.05, alpha = 0.3) +\n  stat_summary(fun.y=mean, geom=\"point\", shape=19, size=3) +\n  stat_summary(fun.data = mean_cl_normal, geom = \"errorbar\", size = 1, aes(width = 0.5)) +\n  scale_fill_manual(values=c(\"tomato\", \"lightseagreen\")) +\n  ylab(\"ln(phenotypic distance [SDs]\\nof divergent traits)\") + \n  xlab(\"cross type\") +\n  theme_KT_FGM \n\nGendist_Cont_Fig <- ggplot(nis_traits_diff_int_allstudies, aes(x = log(mean_GenDist), y = log(mean_sds_diff_divergent_traits), colour = PA)) +\n  geom_point() +\n  ylab(\"log(genetic divergence)\") + \n  xlab(\"ln(phenotypic distance [SDs]\\nof divergent traits)\") +\n  scale_colour_manual(values = c(\"brown\", \"green\")) +\n  theme_KT_FGM\n\nDivergence_Time_Fig <- ggplot(divergence_time_trait_DF, aes(x = estimated_time_timetree, y = log(mean_sds_diff_divergent_traits))) +\n  geom_point() + \n  geom_smooth() + \n  ylab(\"ln(phenotypic distance [SDs]\\nof divergent traits)\") + \n  xlab(\"divergence time (MYA)\") + \n  theme_KT_FGM\n\ngendist_fig <- plot_grid(Intra_Inter_Reduced_Fig, Intra_Inter_All_Fig, Gendist_Cont_Fig, Divergence_Time_Fig, labels = \"AUTO\", ncol = 2)\nggsave(gendist_fig, filename = '../../../../Apps/Overleaf/pleiotropy_ms/Figures/gendist_fig.pdf', height = 6, width = 6)\n\n# OK, what I want to do is:\n# Figure out which studies use the SAME SPECIES (regardless of subspecies) as their parents\n# then group based on that\n# THEN compute whether inter vs. intra matters!\n\nCross.Names <- read.csv('NIS_Analysis/data/List_of_Species_Crosses.csv')\n\n#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#\n# ALTERNATIVE TRAIT SELECTION #\n#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#\n\n# create a dataset that has studies with divergent and non divergent traits \n\n\n\n\n\nall_traits_data <- filter_diff_traits(unique(nis_traits_std$TraitType))\nm_l_pig_data <- filter_diff_traits(traittypes = c(\"Morphology\", \"Life_history\", \"Pigment\"))\nm_l_data <- filter_diff_traits(traittypes = c(\"Morphology\", \"Life_history\"))\n\nm_l_pig_fig <- simple_lm_fig_function(m_l_pig_data)\nsummary(lm(log(mean_segvar_non_diff) ~ log(mean_sds_diff_divergent_traits), m_l_pig_data))\n\nall_traits_fig <- simple_lm_fig_function(all_traits_data)\n\nm_l_fig <- simple_lm_fig_function(m_l_data)\n\ndifferent_traits_fig <- plot_grid(all_traits_fig, m_l_pig_fig, m_l_fig, labels = \"AUTO\", ncol = 2)\nggsave(different_traits_fig, filename = '../../../../Apps/Overleaf/pleiotropy_ms/Figures/different_traits_fig.pdf', height = 5, width = 9)\n\n#%% %%%% %%%%% %%%% %%#\n# ALTERNATIVE BINNING #\n#%% %%%% %%%%% %%%% %%#\n\n# function to filter by stats alone\n\nstats_and_or_SD_diff_df <- filter_stats_and_SD(nis_traits_std)\n\n\n# main linear models; univariate\nhypothesis_lm_log_stats_or_SD <- lm(log(mean_segvar_non_diff) ~ log(mean_sds_diff_divergent_traits), data = stats_and_or_SD_diff_df)\n\n## summarize the main model\nsummary(hypothesis_lm_log_stats_or_SD)\n\n# run a model with non-divergent traits as predictor\nalternative_lm_STATSONLY <- lm(log(mean_segvar_non_diff) ~ log1p(mean_sds_diff_non_divergent_traits), data = only_stats_diff_df)\n## and analyze\nsummary(alternative_lm_STATSONLY)\n\n# now as a double check run a multiple regression; only divergent traits comes out as predictive\nsummary(lm(log(mean_segvar_non_diff) ~ log1p(mean_sds_diff_non_divergent_traits) + log(mean_sds_diff_divergent_traits), data = only_stats_diff_df))\n\nstats_only_fig_div <- simple_lm_fig_function(only_stats_diff_df) + \n  annotate(\"text\", label = expression(paste(italic(\"P\"), \" = 0.0169; \",\n                                            italic(\"r\")^2, \" = 0.3659\")), x = 0.5, y = 2.5, size = 6)\n\nstats_or_SD_binning_fig <- \n  ggplot(stats_and_or_SD_diff_df, \n         aes(x = log1p(mean_sds_diff_divergent_traits), y = log(mean_segvar_non_diff))) +\n  xlab(\"ln(phenotypic distance [SDs]\\nof divergent traits)\") +\n  ylab(\"ln(segregation variance of\\nnon-divergent traits)\") +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = F, colour = \"black\") +\n  theme_KT_FGM + \n  theme(aspect.ratio = 3/4)\n\n# stats_only_fig <- plot_grid(stats_only_fig_div, stats_only_fig_NONdiv, labels = \"AUTO\", ncol = 2)\nggsave(stats_or_SD_binning_fig, filename = '../../../../Apps/Overleaf/pleiotropy_ms/Figures/fig2_but_stats_or_SD.pdf', height = 3, width = 4)\n\nsummary(lm(log(mean_segvar_non_diff) ~ log(mean_sds_diff_divergent_traits), only_stats_diff_df))\n",
    "created" : 1564253752126.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "97|39|125|0|\n",
    "hash" : "2737191668",
    "id" : "4B25F096",
    "lastKnownWriteTime" : 1564264718,
    "last_content_update" : 1564264718492,
    "path" : "~/Dropbox/!Ph.D./!NIS_Nonadditive_Inheritance_and_Speciation/!FGM_Test_Offshoot/pleiotropy-test/scripts/fgm_test.R",
    "project_path" : "scripts/fgm_test.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}